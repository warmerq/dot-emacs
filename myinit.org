#+STARTUP: overview
#+PROPERTY: header-args :comments no :results silent :elisp :lexical t

* osx keys
#+BEGIN_SRC emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin))
  (when *is-a-mac*
	(setq mac-command-modifier 'control)
	(setq mac-right-command-modifier 'meta)
	(setq mac-option-modifier 'super)
	(setq mac-right-option-modifier 'alt)
	(setq mac-pass-command-to-system nil)
	)
#+END_SRC

* Basic Editing
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default line-spacing 0.1)
  (electric-pair-mode t)
#+end_src
* repos
#+BEGIN_SRC emacs-lisp

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Encoding
解决shell下中文显示乱
码的问题
#+begin_src emacs-lisp
  (setenv "LANG" "zh_CN.UTF-8")
#+end_src
* try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* Ace windows for easy window switching
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (setq aw-scope 'global) ;; was frame
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
      ))
#+END_SRC

#+RESULTS:

* Swiper / Ivy / Counsel
Swiper gives us a really efficient incremental search with regular expressions
and Ivy / Counsel replace a lot of ido or helms completion functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
  
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))
  
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
           ("C-r" . swiper-isearch)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

* Nerd Icons
required by doom-modeline, need to run 'M-x nerd-icons-install-fonts' 
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons 
    :ensure t
    :defer 0.5)

  (use-package nerd-icons-ivy-rich
    :ensure t
    :init (nerd-icons-ivy-rich-mode 1))

  (use-package nerd-icons-dired
    :ensure t
    )

  (add-hook 'dired-mode-hook 'nerd-icons-dired-mode)

#+END_SRC

* Themes and modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))

  (use-package color-theme-sanityinc-tomorrow
    :ensure t)

  (load-theme 'sanityinc-tomorrow-night t)

#+END_SRC

* Reveal

#+BEGIN_SRC emacs-lisp  :tangle no
  (use-package ox-reveal
    :ensure t
    :config
    (require 'ox-reveal)
    ;;(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-root "https://cdn.bootcss.com/reveal.js/3.8.0/")
    (setq org-reveal-mathjax t))
  (use-package htmlize
    :ensure t)
  (use-package org-re-reveal
    :ensure t
    :config
    (require 'org-re-reveal)
    (setq org-re-reveal-root "https://cdn.bootcss.com/reveal.js/3.8.0"))
#+END_SRC

#+RESULTS:
: t

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
  
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

#+RESULTS:

* Code Folding
#+begin_src emacs-lisp
  (use-package hideshow
	:hook ((prog-mode . hs-minor-mode)))

  (defun toggle-fold ()
	(interactive)
	(save-excursion
	  (end-of-line)
	  (backward-char 1)
	  (hs-toggle-hiding)))
#+end_src

* RestClient
#+begin_src emacs-lisp
  (use-package restclient)
#+end_src

* Misc packages
#+BEGIN_SRC emacs-lisp
  ;; Highlights the current cursor line
  (global-hl-line-mode t)


  (use-package projectile
	:ensure t
	:bind ("C-c p" . projectile-command-map)
	:config
	(projectile-global-mode)
	(setq projectile-completion-system 'ivy))

  ;; (use-package smart-tabs-mode
  ;;   :ensure t
  ;;   :config
  ;;   (smart-tabs-insinuate 'java ))

  (use-package smartparens
	:ensure t
	:hook (prog-mode . smartparens-mode)
	:custom
	(sp-escape-quotes-after-insert nil)
	:config
	(require 'smartparens-config))

  (show-paren-mode t)

  ;; flashes the cursor's line when you scroll
  (use-package beacon
	:ensure t
	:config
	(beacon-mode 1)
	;; (setq beacon-color "#666600")
	)

  ;; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
	:ensure t
	:config
	(global-hungry-delete-mode))


  (use-package multiple-cursors
	:ensure t)

  ;; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
	:ensure t
	:config 
	(global-set-key (kbd "C-=") 'er/expand-region))

  (setq save-interprogram-paste-before-kill t)


  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil) ;; or this
  (global-set-key (kbd "<f5>") 'revert-buffer)

  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
		backup-by-copying t    ; Don't delink hardlinks
		version-control t      ; Use version numbers on backups
		delete-old-versions t  ; Automatically delete excess backups
		kept-new-versions 20   ; how many of the newest versions to keep
		kept-old-versions 5    ; and how many of the old
		)

  (use-package yaml-mode
	:ensure t)

  (use-package atomic-chrome
	:ensure t)
#+END_SRC

* iedit and narrow / widen dwim

#+BEGIN_SRC emacs-lisp
  ;; mark and edit all copies of the marked region simultaniously. 
  (use-package iedit
    :ensure t)
  
  ;; if you're windened, narrow to the region, if you're narrowed, widen
  ;; bound to C-x n
  (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.
  
  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing command.
           ;; Remove this first conditional if you don't want it.
           (cond ((ignore-errors (org-edit-src-code))
                  (delete-other-windows))
                 ((org-at-block-p)
                  (org-narrow-to-block))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))
  
  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  ;; (define-key ctl-x-map "n" #'narrow-or-widen-dwim) ;
  
#+END_SRC


#+RESULTS:
: narrow-or-widen-dwim

* Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra 
    :ensure hydra
    :init 
    (global-set-key
     (kbd "C-x t")
     (defhydra toggle (:color blue)
       "toggle"
       ("a" abbrev-mode "abbrev")
       ("s" flyspell-mode "flyspell")
       ("d" toggle-debug-on-error "debug")
       ("c" fci-mode "fCi")
       ("f" auto-fill-mode "fill")
       ("t" toggle-truncate-lines "truncate")
       ("w" whitespace-mode "whitespace")
       ("q" nil "cancel")))
  
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline 
       ( :pre (linum-mode 1)
         :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
  
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
       ("l" (or )rg-capture-goto-last-stored "Last Capture"))
  
     ))
  
  (defhydra hydra-multiple-cursors (:hint nil)
    "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("s" mc/mark-all-in-region-regexp :exit t)
    ("0" mc/insert-numbers :exit t)
    ("A" mc/insert-letters :exit t)
    ("<mouse-1>" mc/add-cursor-on-click)
    ;; Help with click recognition in this hydra
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore)
    ("q" nil)
  
  
    ("<mouse-1>" mc/add-cursor-on-click)
    ("<down-mouse-1>" ignore)
    ("<drag-mouse-1>" ignore))
  
#+END_SRC

#+RESULTS:

* Dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode :ensure t)
  
#+end_src
* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (progn
      (bind-key "C-x g" 'magit-status)
      ))

  ;; (setq magit-status-margin
  ;;       '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

  ;; (use-package git-gutter
  ;;   :ensure t
  ;;   :init
  ;;   (global-git-gutter-mode +1))

  ;; (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


  (use-package git-timemachine
    :ensure t)

  ;; (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
  ;;                                       :hint nil)
  ;;   "
  ;;   Git gutter:
  ;;     _j_: next hunk        _s_tage hunk     _q_uit
  ;;     _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ;;     ^ ^                   _p_opup hunk
  ;;     _h_: first hunk
  ;;     _l_: last hunk        set start _R_evision
  ;;   "
  ;;   ("j" git-gutter:next-hunk)
  ;;   ("k" git-gutter:previous-hunk)
  ;;   ("h" (progn (goto-char (point-min))
  ;;               (git-gutter:next-hunk 1)))
  ;;   ("l" (progn (goto-char (point-min))
  ;;               (git-gutter:previous-hunk 1)))
  ;;   ("s" git-gutter:stage-hunk)
  ;;   ("r" git-gutter:revert-hunk)
  ;;   ("p" git-gutter:popup-hunk)
  ;;   ("R" git-gutter:set-start-revision)
  ;;   ("q" nil :color blue)
  ;;   ("Q" (progn (git-gutter-mode -1)
  ;;               ;; git-gutter-fringe doesn't seem to
  ;;               ;; clear the markup right away
  ;;               (sit-for 0.1)
  ;;               (git-gutter:clear))
  ;;    :color blue))



#+END_SRC

* IBUFFER
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode) (mode . term-mode)))
                 ("mu4e" (or
  
                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . python-ts-mode)
                                 (mode . go-ts-mode)
                                 (mode . rust-ts-mode)
                                 (mode . c++-ts-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))
  
  ;; don't show these
                                          ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
  
  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)
  
#+END_SRC

* Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (progn
  
      (setq treemacs-follow-after-init          t
            treemacs-width                      35
            treemacs-indentation                2
            treemacs-git-integration            t
            treemacs-collapse-dirs              3
            treemacs-silent-refresh             nil
            treemacs-change-root-without-asking nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-show-hidden-files          t
            treemacs-never-persist              nil
            treemacs-is-never-other-window      nil
            treemacs-goto-tag-strategy          'refetch-index)
  
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t))
    :bind
    (:map global-map
          ([f8]        . treemacs)
          ([f9]        . treemacs-projectile)
          ("<C-M-tab>" . treemacs)
          ("M-0"       . treemacs-select-window)
          ("C-c 1"     . treemacs-delete-other-windows)
          ))
  (use-package treemacs-projectile
    :defer t
    :ensure t
    :config
    (setq treemacs-header-function #'treemacs-projectile-create-header)
    )
  
#+END_SRC

#+RESULTS:

* PATH and ENV
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    )

  (setenv "HTTP_PROXY" "http://127.0.0.1:8001")
  (setenv "HTTPS_PROXY" "http://127.0.0.1:8001")
  (setenv "GOPROXY" "https://proxy.golang.com.cn,direct")
  (setenv "GOPRIVATE" "git.thunics.com")


#+END_SRC

* Ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package deadgrep 
    :ensure t)
  
  (use-package rg
    :ensure t
    :commands rg)
#+END_SRC

* Javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :ensure ac-js2
    :init
    (progn
      (add-hook 'js-mode-hook 'js2-minor-mode)
      (add-hook 'js2-mode-hook 'ac-js2-mode)
      ))
  
  (use-package js2-refactor
    :ensure t
    :config 
    (progn
      (js2r-add-keybindings-with-prefix "C-c C-m")
      ;; eg. extract function with `C-c C-m ef`.
      (add-hook 'js2-mode-hook #'js2-refactor-mode)))
  
  ;; (use-package tern
  ;;   :ensure tern
  ;;   :ensure tern-auto-complete
  ;;   :config
  ;;   (progn
  ;;     (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  ;;     (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
  ;;     (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;;     ;;(tern-ac-setup)
  ;;     ))
  
  ;;(use-package jade
  ;;:ensure t
  ;;)
  
  
  
  ;; turn on flychecking globally
  (add-hook 'after-init-hook #'global-flycheck-mode)
  
  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))
  
  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  
  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")
  
  ;; disable json-jsonlist checking for json files
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(json-jsonlist)))
  

#+END_SRC 

* Web Mode
#+begin_src emacs-lisp

  (use-package web-mode
    :ensure t)

  ;; adjust indents for web-mode to 2 spaces

  (defun my-web-mode-hook ()
    "Hooks for Web mode. Adjust indents"
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-code-indent-offset 4))
  (add-hook 'web-mode-hook  'my-web-mode-hook)

  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))
  (setq web-mode-engines-alist 
        '(("svelte" . "\\.svelte\\'")))
#+end_src

* golang
need to install gopls: 
#+BEGIN_SRC shell
  go get golang.org/x/tools/gopls@latest
#+END_SRC
  
#+BEGIN_SRC emacs-lisp

  ;; (use-package go-mode
  ;;   :ensure t)

  ;; (use-package gomacro-mode
  ;;   :hook (go-mode . gomacro-mode)
  ;;   :config (setq gomacro-command "gomacro_proxy") ;use proxy when getting package in gomacro
  ;;   )


  ;; (defun my-go-mode-hook ()
  ;;   ; Use goimports instead of go-fmt
  ;;   ;(setq gofmt-command "goimports")
  ;;   ; Call Gofmt before saving
  ;;   (add-hook 'before-save-hook 'gofmt-before-save)
  ;;   (setq tab-width 4)
  ;;   (setq indent-tabs-mode nil)
  ;;   ; Customize compile command to run go build
  ;;   (if (not (string-match "go" compile-command))
  ;;       (set (make-local-variable 'compile-command)
  ;;            "go build -v && go test -v && go vet"))
  ;;   ; Godef jump key binding
  ;;   ;(local-set-key (kbd "M-.") 'godef-jump)
  ;;   ;(local-set-key (kbd "M-*") 'pop-tag-mark)
  ;; )

  ;; (add-hook 'go-mode-hook 'my-go-mode-hook)
  ;; (add-hook 'go-ts-mode-hook 'my-go-mode-hook)

  ;; just using go-ts-mode

  (setq go-ts-mode-indent-offset 4)

#+END_SRC

* rust  
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :hook (rust-ts-mode . (lambda () (setq indent-tabs-mode nil)))
    :custom (rust-format-on-save t))
  
#+END_SRC
* treesit
tree sitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :demand t
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
#+end_src
* c-ts-mode
#+begin_src emacs-lisp
  (setq c-ts-mode-indent-offset 4)
#+end_src

* eglot
#+begin_src emacs-lisp
  (add-hook 'go-ts-mode-hook 'eglot-ensure)
  (add-hook 'python-ts-mode-hook 'eglot-ensure)
  (add-hook 'c-ts-mode-hook 'eglot-ensure)
  (add-hook 'c++-ts-mode-hook 'eglot-ensure)
  (add-hook 'cmake-ts-mode 'eglot-ensure)
  (use-package eldoc-box)
  (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-at-point-mode t)
#+end_src

* lsp mode
lsp mode setting, such as golang & python & rust maybe
deprecated, using eglot instead
#+BEGIN_SRC emacs-lisp
					  ;(setq lsp-use-plists t)
  ;; (use-package lsp-mode
  ;;   :ensure t
  ;;   :commands (lsp lsp-deferred)
  ;;   :custom
  ;;   (lsp-auto-guess-root nil)
  ;;   (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  ;;   :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  ;;   :hook 
  ;;   (python-mode . lsp-deferred) 
  ;;   (go-mode . lsp-deferred)
  ;;   (rust-mode . lsp-deferred)
  ;;   (java-mode . lsp-deferred)
  ;;   (web-mode . lsp-deferred)
  ;;   (js-mode . lsp-deferred))

  ;; (use-package lsp-pyright
  ;;   :ensure t
  ;;   :hook (python-mode . (lambda () (require 'lsp-pyright))))

  ;; (setq lsp-modeline-diagnostics-enable t)
  ;; (setq lsp-modeline-diagnostics-scope :workspace)

  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :diminish
  ;;   :commands lsp-ui-mode
  ;;   :custom-face
  ;;   (lsp-ui-doc-background ((t (:background nil))))
  ;;   (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  ;;   :bind (:map lsp-ui-mode-map
  ;;               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
  ;;               ([remap xref-find-references] . lsp-ui-peek-find-references)
  ;;               ("C-c u" . lsp-ui-imenu))
  ;;   :custom
  ;;   (lsp-ui-doc-enable t)
  ;;   (lsp-ui-doc-header t)
  ;;   (lsp-ui-doc-include-signature t)
  ;;   (lsp-ui-doc-position 'top)
  ;;   (lsp-ui-doc-border (face-foreground 'default))
  ;;   (lsp-ui-sideline-enable t)
  ;;   (lsp-ui-sideline-ignore-duplicate t)
  ;;   (lsp-ui-sideline-show-code-actions t)
  ;;   (lsp-ui-flycheck-enable t)

  ;;   :config
  ;;   ;; (setq lsp-ui-sideline-show-hover t
  ;;   ;;               lsp-ui-sideline-delay 0.5
  ;;   ;;               lsp-ui-doc-delay 5
  ;;   ;;               lsp-ui-sideline-ignore-duplicates t
  ;;   ;;               lsp-ui-doc-position 'bottom
  ;;   ;;               lsp-ui-doc-alignment 'frame
  ;;   ;;               lsp-ui-doc-header nil
  ;;   ;;               lsp-ui-doc-include-signature t
  ;;   ;;               lsp-ui-doc-use-childframe t)

  ;;   ;; Use lsp-ui-doc-webkit only in GUI
  ;;                                         ;(setq lsp-ui-doc-use-webkit t)

  ;;   ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;;   ;; https://github.com/emacs-lsp/lsp-ui/issues/243

  ;;   ;; (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
  ;;   ;; 	(setq mode-line-format nil))

  ;;   )

  ;; ;; performance tweeks

  ;; (setq gc-cons-threshold 100000000)
  ;; (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC
* java mode
#+begin_src emacs-lisp
  ;; (use-package lsp-java					;
  ;;   :ensure t
  ;;   :after lsp
  ;;   :config 
  ;;   (add-hook 'java-mode-hook 'lsp))
  
  ;; (use-package dap-mode
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :config
  ;;   (dap-mode t)
  ;;   (dap-ui-mode t))
  
  ;; (use-package dap-java :after (lsp-java))
  
  ;; (use-package kotlin-mode :ensure t)
  
#+end_src
* Protobuf Mode
#+begin_src emacs-lisp
  (use-package protobuf-mode
    :ensure t)
#+end_src
* Org mode
需要添加更多的功能 比如 org-agenda
#+BEGIN_SRC emacs-lisp :lexical t
  (use-package org 
    :ensure t
    :pin org)

  (require 'org-tempo)
                                          ;(setenv "BROWSER" "firefox")

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables
   '(org-directory "~/RoamNotes")
   '(org-default-notes-file (concat org-directory "/Inbox.org"))
   '(org-export-html-postamble nil)
   '(org-hide-leading-stars t)
   '(org-startup-folded (quote overview))
   '(org-startup-indented t)
   '(org-pretty-entities t)
   '(org-hide-emphasis-markers t)
   '(org-startup-with-inline-images t)
   '(org-confirm-babel-evaluate nil)
   '(org-src-fontify-natively t)
   '(org-tags-column 76)
   '(org-complete-tags-always-offer-all-agenda-tags t)
   )

  ;; Drop rows with zero time in org-mode agenda clockreport
  (setq org-agenda-clockreport-parameter-plist
        '(:stepskip0 t :link t :maxlevel 3 :fileskip0 t :tags t))

  (use-package org-appear
    :ensure t
    :hook (org-mode . org-appear-mode))

  (setq org-file-apps
        (append '(("\\.docx\\'" . default)
                  ("\\.pptx\\'" . default))
                org-file-apps))

  (global-set-key "\C-ca" 'org-agenda)
  (define-key global-map (kbd "C-c l") 'org-store-link)

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d/!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "light blue" :weight bold)
                ("DONE" :foreground "green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "green" :weight bold)
                ("PHONE" :foreground "green" :weight bold))))

  (setq org-refile-targets '((nil :maxlevel . 1)
                             (org-agenda-files :maxlevel . 1)))
  (setq org-outline-path-complete-in-steps nil)

  (setq org-agenda-start-on-weekday nil)
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "" ((org-agenda-span 'day)))
            (alltodo "" ((org-agenda-todo-ignore-with-date 'all)))))
          ("o" "Objective agenda view"
           ((agenda "")
            (alltodo "" ((org-agenda-todo-ignore-scheduled 'all))))
           ((org-agenda-tag-filter-preset '("+努力做到最好"))))
          ("p" "Private agenda view"
           ((agenda "")
            (alltodo "" ((org-agenda-todo-ignore-scheduled 'all))))
           ((org-agenda-tag-filter-preset '("-smartbow"))))))

  (global-set-key (kbd "C-c c") 'org-capture)

  ;; (setq org-agenda-files
  ;;       (list org-directory))

  ;; (setq org-agenda-files 
  ;;       (list 
  ;;        (concat org-directory "/gtd.org")
  ;;        (concat org-directory "/smartbow.org")
  ;;        (concat org-directory "/journal.org")
  ;;        (concat org-directory "/inbox.org")))

  (setq org-capture-templates
        '(("l" "Link" entry (file+headline "~/org/inbox.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("t" "To Do Item" entry (file+headline "~/org/inbox.org" "Tasks")
           "* TODO %?\n%u" :prepend t)
          ("n" "Note" entry (file+headline "~/org/inbox.org" "Notes")
           "* %u %? " :prepend t)
          ))


  (defadvice org-capture-finalize 
      (after delete-capture-frame activate)  
    "Advise capture-finalize to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

  (defadvice org-capture-destroy 
      (after delete-capture-frame activate)  
    "Advise capture-destroy to close the frame"  
    (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))  

  ;; (use-package noflet
  ;;   :ensure t )
  ;; (defun make-capture-frame ()
  ;;   "Create a new frame and run org-capture."
  ;;   (interactive)
  ;;   (make-frame '((name . "capture")))
  ;;   (select-frame-by-name "capture")
  ;;   (delete-other-windows)
  ;;   (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
  ;;     (org-capture)))

  ;; ;; (require 'ox-beamer)
  ;; ;; for inserting inactive dates
  ;; (define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-inactive))))


  (use-package htmlize :ensure t)

  ;; org-download
  (use-package org-download
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq-default org-download-image-dir "~/RoamNotes/images")
    )

  ;;(setq org-image-actual-width (/ (display-pixel-width) 3))
  (setq org-image-actual-width nil)

  ;; Org-Roam configuration

  (use-package org-roam
    :ensure t
    :demand t  ;; Ensure org-roam is loaded by default
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n I" . org-roam-node-insert-immediate)
           ("C-c n g" . org-roam-tag-add)
           ("C-c n p" . my/org-roam-find-project)
           ("C-c n t" . my/org-roam-capture-task)
           ("C-c n b" . my/org-roam-capture-inbox)
           ("C-c n r" . my/org-roam-refresh-agenda-list)
           ("C-c n a" . org-roam-alias-add)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (require 'org-roam-protocol)
    (org-roam-db-autosync-mode))

  ;; (setq org-roam-dailies-capture-templates
  ;; 	  '(("d" "default" entry "* %?" :target
  ;;   (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>"))))

  ;; (defun my/daily-templates ()
  ;;   (format "Hello world %s" (plist-get org-capture-plist :day)))

  ;; (setq org-roam-dailies-capture-templates
  ;;       `(("d" "default" plain
  ;; 		 (function my/daily-templates)
  ;;          :target
  ;;          (file "%<%Y-%m-%d>.org")
  ;; 		 :day "aaabbb")))


  (setq org-roam-dailies-capture-templates
        `(("d" "default" entry "* %?" 
           :target
           (file+head "%<%Y-%m-%d>.org"
                      ,(concat "#+title: %<%Y-%m-%d>\n#+filetags: Daily\n" 
                               "* 晨间日记\n"
                               "** 清晨元时间 [0/5]\n"
                               "- [ ] 起床\n"
                               "- [ ] 八段锦\n"
                               "- [ ] 洗头\n"
                               "** 午后 [0/2]\n"
                               "- [ ] 午休\n"
                               "- [ ] 站桩休息一下\n"
                               "** WOOP\n"
                               "- Wish :: \n"
                               "- Outcome :: \n"
                               "- Obstacles :: \n"
                               "- Plan :: \n"
                               "** 重要的事 [/]\n"
                               "- [ ] \n"
                               "- [ ] \n"
                               "- [ ] \n"
                               "** 触动和感悟\n"
                               "*** 美好时光日志\n\n"
                               "*** 低沉时光日志\n\n"
                               "*** 其他\n\n"
                               "* Notes\n\n"
                               "* Tasks\n"
                               )))))

  (setq org-roam-capture-ref-templates
        '(("w" "webpage" plain
           "\n${body}\n%?"
           :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n\n")
           :unnarrowed t)))


  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files
          (delete-dups (my/org-roam-list-notes-by-tag "Project"))))

  ;; (defun my/org-roam-refresh-agenda-list ()
  ;;   (interactive)
  ;;   (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)

  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
      capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain
        "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t))))

  (defun my/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates '(("i" "inbox" plain "* %?"
                                     :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates '(("p" "project" plain "** TODO %?"
                                     :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                            "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                            ("Tasks"))))))

  (defun my/org-roam-copy-todo-to-today ()
    (interactive)
    (let ((org-refile-keep t) ;; Set this to nil to delete the original!
          (org-roam-dailies-capture-templates
           '(("t" "tasks" entry "%?"
              :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
          (org-after-refile-insert-hook #'save-buffer)
          today-file
          pos)
      (save-window-excursion
        (org-roam-dailies--capture (current-time) t)
        (setq today-file (buffer-file-name))
        (setq pos (point)))

      ;; Only refile if the target file is different than the current file
      (unless (equal (file-truename today-file)
                     (file-truename (buffer-file-name)))
        (org-refile nil nil (list "Tasks" today-file nil pos)))))

  (add-to-list 'org-after-todo-state-change-hook
               (lambda ()
                 (when (equal org-state "DONE")
                   (my/org-roam-copy-todo-to-today))))

  (setq org-roam-mode-section-functions
        (list #'org-roam-backlinks-section
              #'org-roam-reflinks-section
              #'org-roam-unlinked-references-section
              ))

  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 76)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t)))))
  (use-package deft
    :config
    (setq deft-directory org-directory
          deft-recursive t
          deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
          deft-use-filename-as-title t)
    :bind
    ("C-c n s" . deft))					;search

  (use-package org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+END_SRC
* org-mac-link
Customize the org group by typing M-x customize-group RET org RET,
then expand the Modules section, and enable mac-link.  You may also
optionally bind a key to activate the link grabber menu, like this:

#+BEGIN_SRC emacs-lisp
  (require 'org-mac-link)
  (add-hook 'org-mode-hook (lambda () 
                             (define-key org-mode-map (kbd "C-c g") 'org-mac-grab-link)))  
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (setq company-selection-wrap-around t)

    (global-company-mode t))

  ;; (use-package company-lsp
  ;;   :ensure t
  ;;   :config
  ;;   (setq compnay-lsp-enable-snippet t)
  ;;   (push 'company-lsp company-backends)
  ;;   )

#+END_SRC
* Markdown
brew install grip
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
  (add-to-list 'auto-mode-alist '("\\.md.html\\'" . markdown-mode))
  (use-package grip-mode
    :ensure t
    :bind (:map markdown-mode-command-map
                ("g" . grip-mode)))
#+END_SRC

* Apple Color Emoji
😄😆你好呀➡️ ➡️ ⬅️➡️ ⭐ 🌟
#+BEGIN_SRC emacs-lisp
    (progn
      ;; set font for emoji (if before emacs 28, should come after setting symbols. emacs 28 now has 'emoji . before, emoji is part of 'symbol)
      (set-fontset-font
       t
       (if (version< emacs-version "28.1")
           '(#x1f300 . #x1fad0)
         'emoji
         )
       (cond
        ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")      
        ((member "Noto Color Emoji" (font-family-list)) "Noto Color Emoji")
        ((member "Noto Emoji" (font-family-list)) "Noto Emoji")
        ((member "Segoe UI Emoji" (font-family-list)) "Segoe UI Emoji")
        ((member "Symbola" (font-family-list)) "Symbola"))))


    ;; (set-fontset-font
    ;;  t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend)

    (use-package company-emoji
      :ensure t)

    (use-package company
      :ensure t
      :config
      ;; ...
      (add-to-list 'company-backends 'company-emoji))

#+END_SRC
* Dash
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (use-package dash-at-point
      :ensure t
      :config (global-set-key (kbd "C-c D") 'dash-at-point)))
#+END_SRC
* recent files
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'recentf-mode)
  (setq-default
   recentf-max-saved-items 1000
   recentf-exclude '("/tmp/" "/ssh:"))
#+END_SRC
* Chinese Font
#+BEGIN_SRC emacs-lisp
  (use-package cnfonts
    :ensure t
    :config (cnfonts-enable)
    :bind (("C-M-=" . cnfonts-increase-fontsize)
           ("C-M--" . cnfonts-decrease-fontsize)))
#+END_SRC
* emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

* Proxy Mode
#+begin_src emacs-lisp
(use-package proxy-mode
  :ensure t)  
#+end_src

* eshell
#+begin_src emacs-lisp
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
    current buffer's file. The eshell is renamed to match that
    directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))
      (insert (concat "ls"))
      (eshell-send-input)
      ))

  (defun eshell/x (&rest _args)
    "exit quickly"
    (insert "exit")
    (eshell-send-input)
    (if (length> (window-list) 1)
      (delete-window)))

  (use-package vterm
    :ensure t)
  (use-package eshell-vterm
    :ensure t
    :demand t
    :after eshell
    :config (eshell-vterm-mode))

  (defalias 'eshell/v 'eshell-exec-visual)
#+end_src

* anki
#+begin_src emacs-lisp
  (use-package anki-editor
    :ensure t)
#+end_src

* Load custom.el
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))  
#+end_src

* personal keymap
#+BEGIN_SRC emacs-lisp
  ;; set up my own map
  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-z") 'z-map) ;; was C-1
  (define-key z-map (kbd "[") 'org-mark-ring-goto)
  (define-key z-map (kbd "k") 'compile)
  (define-key z-map (kbd "c") 'hydra-multiple-cursors/body)
  ;;(define-key z-map (kbd "m") 'mu4e)
  ;;(define-key z-map (kbd "1") 'org-global-cycle)
  ;;(define-key z-map (kbd "a") 'org-agenda-show-agenda-and-todo)
  (define-key z-map (kbd "g") 'counsel-rg)

  ;;(define-key z-map (kbd "2") 'make-frame-command)
  ;;(define-key z-map (kbd "0") 'delete-frame)
  (define-key z-map (kbd "o") 'ace-window)
  (define-key z-map (kbd "s") 'deadgrep)  
										  ;(define-key z-map (kbd "s") 'flyspell-correct-word-before-point)
  ;;(define-key z-map (kbd "i") 'z/load-iorg)
  (define-key z-map (kbd "f") 'toggle-fold)
  ;;(define-key z-map (kbd "w") 'z/swap-windows)
  ;;(define-key z-map (kbd "*") 'calc)
  (define-key z-map (kbd "n") 'narrow-or-widen-dwim)
  (define-key z-map (kbd "j") 'org-clock-goto)
  (define-key z-map (kbd "e") 'eshell-here)
  (global-set-key (kbd "C-<down-mouse-1>") 'browse-url-at-mouse)
#+END_SRC

