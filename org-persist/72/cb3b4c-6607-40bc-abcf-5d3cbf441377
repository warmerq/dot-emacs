(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #51=(headline (:raw-value #1="osx keys" :begin 93 :end 401 :pre-blank 0 :contents-begin 104 :contents-end 400 :robust-begin 106 :robust-end 398 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 93 :title #1# :mode nil :granularity element :cached t :parent #3=(org-data (:begin 1 :contents-begin 1 :contents-end 41351 :end 41352 :robust-begin 3 :robust-end 41349 :post-blank 1 :post-affiliated 1 :path "/Users/warmer/.emacs.d/myinit.org" :mode org-data :CATEGORY "myinit" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #54=(headline (:raw-value #2="repos" :begin 538 :end 658 :pre-blank 0 :contents-begin 546 :contents-end 657 :robust-begin 548 :robust-end 655 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 538 :title #2# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #52=(headline (:raw-value #4="Basic Editing" :begin 401 :end 538 :pre-blank 0 :contents-begin 417 :contents-end 538 :robust-begin 419 :robust-end 536 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 401 :title #4# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #57=(headline (:raw-value #5="Encoding" :begin 799 :end 894 :pre-blank 0 :contents-begin 810 :contents-end 894 :robust-begin 812 :robust-end 892 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 799 :title #5# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #62=(headline (:raw-value #6="which key" :begin 968 :end 1087 :pre-blank 0 :contents-begin 980 :contents-end 1086 :robust-begin 982 :robust-end 1084 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 968 :title #6# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #60=(headline (:raw-value #7="try" :begin 894 :end 968 :pre-blank 0 :contents-begin 900 :contents-end 967 :robust-begin 902 :robust-end 965 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 894 :title #7# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #56=(headline (:raw-value #8="interface tweaks" :begin 658 :end 799 :pre-blank 0 :contents-begin 677 :contents-end 798 :robust-begin 679 :robust-end 796 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 658 :title #8# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[[nil nil #66=(headline (:raw-value #9="Swiper / Ivy / Counsel" :begin 1512 :end 2536 :pre-blank 0 :contents-begin 1537 :contents-end 2535 :robust-begin 1539 :robust-end 2533 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1512 :title #9# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #71=(headline (:raw-value #10="Themes and modeline" :begin 2909 :end 3160 :pre-blank 0 :contents-begin 2931 :contents-end 3159 :robust-begin 2933 :robust-end 3157 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2909 :title #10# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #69=(headline (:raw-value #11="Nerd Icons" :begin 2536 :end 2909 :pre-blank 0 :contents-begin 2549 :contents-end 2908 :robust-begin 2551 :robust-end 2906 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2536 :title #11# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #74=(headline (:raw-value #12="Flycheck" :begin 3678 :end 3803 :pre-blank 0 :contents-begin 3689 :contents-end 3803 :robust-begin 3691 :robust-end 3801 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3678 :title #12# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #79=(headline (:raw-value #13="Code Folding" :begin 3987 :end 4217 :pre-blank 0 :contents-begin 4002 :contents-end 4216 :robust-begin 4004 :robust-end 4214 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3987 :title #13# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #75=(headline (:raw-value #14="Yasnippet" :begin 3803 :end 3987 :pre-blank 0 :contents-begin 3815 :contents-end 3986 :robust-begin 3817 :robust-end 3984 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3803 :title #14# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #72=(headline (:raw-value #15="Reveal" :begin 3160 :end 3678 :pre-blank 1 :contents-begin 3170 :contents-end 3677 :robust-begin 3172 :robust-end 3675 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3160 :title #15# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #64=(headline (:raw-value #16="Ace windows for easy window switching" :begin 1087 :end 1512 :pre-blank 0 :contents-begin 1127 :contents-end 1511 :robust-begin 1129 :robust-end 1509 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1087 :title #16# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[[[nil nil #82=(headline (:raw-value #17="Misc packages" :begin 4291 :end 6015 :pre-blank 0 :contents-begin 4307 :contents-end 6014 :robust-begin 4309 :robust-end 6012 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4291 :title #17# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #86=(headline (:raw-value #18="Hydra" :begin 7574 :end 10737 :pre-blank 0 :contents-begin 7582 :contents-end 10736 :robust-begin 7584 :robust-end 10734 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7574 :title #18# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #84=(headline (:raw-value #19="iedit and narrow / widen dwim" :begin 6015 :end 7574 :pre-blank 1 :contents-begin 6048 :contents-end 7573 :robust-begin 6050 :robust-end 7571 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6015 :title #19# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #90=(headline (:raw-value #20="git" :begin 10828 :end 12360 :pre-blank 0 :contents-begin 10834 :contents-end 12359 :robust-begin 10836 :robust-end 12357 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10828 :title #20# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #94=(headline (:raw-value #21="Treemacs" :begin 13952 :end 15213 :pre-blank 0 :contents-begin 13963 :contents-end 15212 :robust-begin 13965 :robust-end 15210 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13952 :title #21# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #91=(headline (:raw-value #22="IBUFFER" :begin 12360 :end 13952 :pre-blank 0 :contents-begin 12370 :contents-end 13951 :robust-begin 12372 :robust-end 13949 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 12360 :title #22# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #87=(headline (:raw-value #23="Dockerfile" :begin 10737 :end 10828 :pre-blank 0 :contents-begin 10750 :contents-end 10828 :robust-begin 10752 :robust-end 10826 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10737 :title #23# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[[nil nil #97=(headline (:raw-value #24="Ripgrep" :begin 15567 :end 15704 :pre-blank 0 :contents-begin 15577 :contents-end 15703 :robust-begin 15579 :robust-end 15701 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15567 :title #24# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #101=(headline (:raw-value #25="Web Mode" :begin 17212 :end 17782 :pre-blank 0 :contents-begin 17223 :contents-end 17781 :robust-begin 17225 :robust-end 17779 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17212 :title #25# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #99=(headline (:raw-value #26="Javascript" :begin 15704 :end 17212 :pre-blank 0 :contents-begin 15717 :contents-end 17211 :robust-begin 15719 :robust-end 17209 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15704 :title #26# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #105=(headline (:raw-value #27="rust" :begin 18923 :end 19111 :pre-blank 0 :contents-begin 18932 :contents-end 19111 :robust-begin 18934 :robust-end 19109 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18923 :title #27# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #109=(headline (:raw-value #28="c-ts-mode" :begin 19292 :end 19373 :pre-blank 0 :contents-begin 19304 :contents-end 19372 :robust-begin 19306 :robust-end 19370 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19292 :title #28# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #106=(headline (:raw-value #29="treesit" :begin 19111 :end 19292 :pre-blank 0 :contents-begin 19121 :contents-end 19292 :robust-begin 19123 :robust-end 19290 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19111 :title #29# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #102=(headline (:raw-value #30="golang" :begin 17782 :end 18923 :pre-blank 0 :contents-begin 17791 :contents-end 18922 :robust-begin 17793 :robust-end 18920 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17782 :title #30# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #95=(headline (:raw-value #31="PATH and ENV" :begin 15213 :end 15567 :pre-blank 0 :contents-begin 15228 :contents-end 15566 :robust-begin 15230 :robust-end 15564 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15213 :title #31# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #80=(headline (:raw-value #32="RestClient" :begin 4217 :end 4291 :pre-blank 0 :contents-begin 4230 :contents-end 4290 :robust-begin 4232 :robust-end 4288 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4217 :title #32# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[[[nil nil #113=(headline (:raw-value #33="lsp mode" :begin 19735 :end 22421 :pre-blank 0 :contents-begin 19746 :contents-end 22421 :robust-begin 19748 :robust-end 22419 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19735 :title #33# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #118=(headline (:raw-value #34="Protobuf Mode" :begin 22815 :end 22908 :pre-blank 0 :contents-begin 22831 :contents-end 22908 :robust-begin 22833 :robust-end 22906 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22815 :title #34# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #115=(headline (:raw-value #35="java mode" :begin 22421 :end 22815 :pre-blank 0 :contents-begin 22433 :contents-end 22815 :robust-begin 22435 :robust-end 22813 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22421 :title #35# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #121=(headline (:raw-value #36="org-mac-link" :begin 36097 :end 36506 :pre-blank 0 :contents-begin 36112 :contents-end 36506 :robust-begin 36114 :robust-end 36504 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36097 :title #36# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #125=(headline (:raw-value #37="Markdown" :begin 36906 :end 37184 :pre-blank 0 :contents-begin 36917 :contents-end 37183 :robust-begin 36919 :robust-end 37181 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36906 :title #37# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #123=(headline (:raw-value #38="Company" :begin 36506 :end 36906 :pre-blank 0 :contents-begin 36516 :contents-end 36906 :robust-begin 36518 :robust-end 36904 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36506 :title #38# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #119=(headline (:raw-value #39="Org mode" :begin 22908 :end 36097 :pre-blank 0 :contents-begin 22919 :contents-end 36097 :robust-begin 22921 :robust-end 36095 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22908 :title #39# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[[nil nil #130=(headline (:raw-value #40="Dash" :begin 38189 :end 38371 :pre-blank 0 :contents-begin 38196 :contents-end 38371 :robust-begin 38198 :robust-end 38369 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38189 :title #40# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #133=(headline (:raw-value #41="Chinese Font" :begin 38550 :end 38764 :pre-blank 0 :contents-begin 38565 :contents-end 38764 :robust-begin 38567 :robust-end 38762 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38550 :title #41# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #131=(headline (:raw-value #42="recent files" :begin 38371 :end 38550 :pre-blank 0 :contents-begin 38386 :contents-end 38550 :robust-begin 38388 :robust-end 38548 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38371 :title #42# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #137=(headline (:raw-value #43="Proxy Mode" :begin 38830 :end 38916 :pre-blank 0 :contents-begin 38843 :contents-end 38915 :robust-begin 38845 :robust-end 38913 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38830 :title #43# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #141=(headline (:raw-value #44="anki" :begin 39984 :end 40067 :pre-blank 0 :contents-begin 39991 :contents-end 40066 :robust-begin 39993 :robust-end 40064 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39984 :title #44# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [nil nil #144=(headline (:raw-value #45="personal keymap" :begin 40193 :end 41352 :pre-blank 0 :contents-begin 40211 :contents-end 41351 :robust-begin 40213 :robust-end 41349 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 40193 :title #45# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #142=(headline (:raw-value #46="Load custom.el" :begin 40067 :end 40193 :pre-blank 0 :contents-begin 40084 :contents-end 40192 :robust-begin 40086 :robust-end 40190 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 40067 :title #46# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #138=(headline (:raw-value #47="eshell" :begin 38916 :end 39984 :pre-blank 0 :contents-begin 38925 :contents-end 39983 :robust-begin 38927 :robust-end 39981 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38916 :title #47# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 1] #134=(headline (:raw-value #48="emacs server" :begin 38764 :end 38830 :pre-blank 0 :contents-begin 38779 :contents-end 38829 :robust-begin 38781 :robust-end 38827 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38764 :title #48# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 1] #128=(headline (:raw-value #49="Apple Color Emoji" :begin 37184 :end 38189 :pre-blank 0 :contents-begin 37204 :contents-end 38189 :robust-begin 37206 :robust-end 38187 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 37184 :title #49# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 1] #111=(headline (:raw-value #50="eglot" :begin 19373 :end 19735 :pre-blank 0 :contents-begin 19381 :contents-end 19734 :robust-begin 19383 :robust-end 19732 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19373 :title #50# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[nil nil #3# 0] [nil nil #51# 0] (section (:begin 1 :end 93 :contents-begin 1 :contents-end 92 :robust-begin 1 :robust-end 90 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 104 :end 401 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defconst *is-a-mac* (eq system-type 'darwin))\12  (when *is-a-mac*\12\11(setq mac-command-modifier 'control)\12\11(setq mac-right-command-modifier 'meta)\12\11(setq mac-option-modifier 'super)\12\11(setq mac-right-option-modifier 'alt)\12\11(setq mac-pass-command-to-system nil)\12\11)\12" :post-blank 1 :post-affiliated 104 :mode planning :granularity element :cached t :parent #53=(section (:begin 104 :end 401 :contents-begin 104 :contents-end 400 :robust-begin 104 :robust-end 398 :post-blank 1 :post-affiliated 104 :mode section :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #59=(section (:begin 417 :end 538 :contents-begin 417 :contents-end 538 :robust-begin 417 :robust-end 536 :post-blank 0 :post-affiliated 417 :mode section :granularity element :cached t :parent #52# :org-element--cache-sync-key nil)) 0] #52# 0] #53# 0] [[[nil nil #54# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 546 :end 658 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\"))\12" :post-blank 1 :post-affiliated 546 :mode planning :granularity element :cached t :parent #55=(section (:begin 546 :end 658 :contents-begin 546 :contents-end 657 :robust-begin 546 :robust-end 655 :post-blank 1 :post-affiliated 546 :mode section :granularity element :cached t :parent #54# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #55# 0] [[nil nil #58=(section (:begin 677 :end 799 :contents-begin 677 :contents-end 798 :robust-begin 677 :robust-end 796 :post-blank 1 :post-affiliated 677 :mode section :granularity element :cached t :parent #56# :org-element--cache-sync-key nil)) 0] [nil nil #57# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 677 :end 799 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq inhibit-startup-message t)\12  (tool-bar-mode -1)\12  (fset 'yes-or-no-p 'y-or-n-p)\12" :post-blank 1 :post-affiliated 677 :mode planning :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) 0] #56# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 417 :end 538 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq-default tab-width 4)\12  (setq-default line-spacing 0.1)\12  (electric-pair-mode t)\12" :post-blank 0 :post-affiliated 417 :mode planning :granularity element :cached t :parent #59# :org-element--cache-sync-key nil)) 0] [[[[nil nil (paragraph (:begin 810 :end 829 :contents-begin 810 :contents-end 829 :post-blank 0 :post-affiliated 810 :mode planning :granularity element :cached t :parent #61=(section (:begin 810 :end 894 :contents-begin 810 :contents-end 894 :robust-begin 810 :robust-end 892 :post-blank 0 :post-affiliated 810 :mode section :granularity element :cached t :parent #57# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #60# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 829 :end 894 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setenv \"LANG\" \"zh_CN.UTF-8\")\12" :post-blank 0 :post-affiliated 829 :mode nil :granularity element :cached t :parent #61# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 900 :end 968 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package try\12    :ensure t)\12" :post-blank 1 :post-affiliated 900 :mode planning :granularity element :cached t :parent #63=(section (:begin 900 :end 968 :contents-begin 900 :contents-end 967 :robust-begin 900 :robust-end 965 :post-blank 1 :post-affiliated 900 :mode section :granularity element :cached t :parent #60# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #68=(section (:begin 980 :end 1087 :contents-begin 980 :contents-end 1086 :robust-begin 980 :robust-end 1084 :post-blank 1 :post-affiliated 980 :mode section :granularity element :cached t :parent #62# :org-element--cache-sync-key nil)) 0] #62# 0] #63# 0] [[[nil nil #64# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1127 :end 1500 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ace-window\12    :ensure t\12    :init\12    (progn\12      (setq aw-scope 'global) ;; was frame\12      (global-set-key (kbd \"C-x O\") 'other-frame)\12      (global-set-key [remap other-window] 'ace-window)\12      (custom-set-faces\12       '(aw-leading-char-face\12         ((t (:inherit ace-jump-face-foreground :height 3.0))))) \12      ))\12" :post-blank 1 :post-affiliated 1127 :mode planning :granularity element :cached t :parent #65=(section (:begin 1127 :end 1512 :contents-begin 1127 :contents-end 1511 :robust-begin 1127 :robust-end 1509 :post-blank 1 :post-affiliated 1127 :mode section :granularity element :cached t :parent #64# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #65# 0] [[nil nil #67=(section (:begin 1537 :end 2536 :contents-begin 1537 :contents-end 2535 :robust-begin 1537 :robust-end 2533 :post-blank 1 :post-affiliated 1537 :mode section :granularity element :cached t :parent #66# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1689 :end 2536 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package counsel\12    :ensure t\12    :bind\12    ((\"M-y\" . counsel-yank-pop)\12     :map ivy-minibuffer-map\12     (\"M-y\" . ivy-next-line)))\12  \12  (use-package ivy\12    :ensure t\12    :diminish (ivy-mode)\12    :bind ((\"C-x b\" . ivy-switch-buffer))\12    :config\12    (ivy-mode 1)\12    (setq ivy-use-virtual-buffers t)\12    (setq ivy-count-format \"%d/%d \")\12    (setq ivy-display-style 'fancy))\12  \12  (use-package swiper\12    :ensure t\12    :bind ((\"C-s\" . swiper-isearch)\12           (\"C-r\" . swiper-isearch)\12           (\"C-c C-r\" . ivy-resume)\12           (\"M-x\" . counsel-M-x)\12           (\"C-x C-f\" . counsel-find-file))\12    :config\12    (progn\12      (ivy-mode 1)\12      (setq ivy-use-virtual-buffers t)\12      (setq ivy-display-style 'fancy)\12      (define-key read-expression-map (kbd \"C-r\") 'counsel-expression-history)\12      ))\12" :post-blank 1 :post-affiliated 1689 :mode nil :granularity element :cached t :parent #67# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 1537 :end 1689 :contents-begin 1537 :contents-end 1689 :post-blank 0 :post-affiliated 1537 :mode planning :granularity element :cached t :parent #67# :org-element--cache-sync-key nil)) 0] #66# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 980 :end 1087 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :ensure t\12    :config\12    (which-key-mode))\12" :post-blank 1 :post-affiliated 980 :mode planning :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 0] #61# 0] [[[[[nil nil #70=(section (:begin 2549 :end 2909 :contents-begin 2549 :contents-end 2908 :robust-begin 2549 :robust-end 2906 :post-blank 1 :post-affiliated 2549 :mode section :granularity element :cached t :parent #69# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2620 :end 2909 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package nerd-icons \12    :ensure t\12    :defer 0.5)\12\12  (use-package nerd-icons-ivy-rich\12    :ensure t\12    :init (nerd-icons-ivy-rich-mode 1))\12\12  (use-package nerd-icons-dired\12    :ensure t\12    )\12\12  (add-hook 'dired-mode-hook 'nerd-icons-dired-mode)\12\12" :post-blank 1 :post-affiliated 2620 :mode nil :granularity element :cached t :parent #70# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 2549 :end 2620 :contents-begin 2549 :contents-end 2620 :post-blank 0 :post-affiliated 2549 :mode planning :granularity element :cached t :parent #70# :org-element--cache-sync-key nil)) 0] [[nil nil #73=(section (:begin 2931 :end 3160 :contents-begin 2931 :contents-end 3159 :robust-begin 2931 :robust-end 3157 :post-blank 1 :post-affiliated 2931 :mode section :granularity element :cached t :parent #71# :org-element--cache-sync-key nil)) 0] [nil nil #72# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2931 :end 3160 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-modeline\12    :ensure t\12    :hook (after-init . doom-modeline-mode))\12\12  (use-package color-theme-sanityinc-tomorrow\12    :ensure t)\12\12  (load-theme 'sanityinc-tomorrow-night t)\12\12" :post-blank 1 :post-affiliated 2931 :mode planning :granularity element :cached t :parent #73# :org-element--cache-sync-key nil)) 0] #71# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 3170 :end 3662 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ox-reveal\12    :ensure t\12    :config\12    (require 'ox-reveal)\12    ;;(setq org-reveal-root \"http://cdn.jsdelivr.net/reveal.js/3.0.0/\")\12    (setq org-reveal-root \"https://cdn.bootcss.com/reveal.js/3.8.0/\")\12    (setq org-reveal-mathjax t))\12  (use-package htmlize\12    :ensure t)\12  (use-package org-re-reveal\12    :ensure t\12    :config\12    (require 'org-re-reveal)\12    (setq org-re-reveal-root \"https://cdn.bootcss.com/reveal.js/3.8.0\"))\12" :post-blank 1 :post-affiliated 3170 :mode planning :granularity element :cached t :parent #78=(section (:begin 3170 :end 3678 :contents-begin 3170 :contents-end 3677 :robust-begin 3170 :robust-end 3675 :post-blank 1 :post-affiliated 3170 :mode section :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #77=(section (:begin 3689 :end 3803 :contents-begin 3689 :contents-end 3803 :robust-begin 3689 :robust-end 3801 :post-blank 0 :post-affiliated 3689 :mode section :granularity element :cached t :parent #74# :org-element--cache-sync-key nil)) 0] #74# 0] [[nil nil #75# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3815 :end 3975 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package yasnippet\12    :ensure t\12    :init\12    (yas-global-mode 1))\12  \12  (use-package yasnippet-snippets\12    :ensure t)\12" :post-blank 1 :post-affiliated 3815 :mode planning :granularity element :cached t :parent #76=(section (:begin 3815 :end 3987 :contents-begin 3815 :contents-end 3986 :robust-begin 3815 :robust-end 3984 :post-blank 1 :post-affiliated 3815 :mode section :granularity element :cached t :parent #75# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #76# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3689 :end 3803 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package flycheck\12    :ensure t\12    :init\12    (global-flycheck-mode t))\12  \12" :post-blank 0 :post-affiliated 3689 :mode planning :granularity element :cached t :parent #77# :org-element--cache-sync-key nil)) 0] #78# 0] [[[[nil nil #81=(section (:begin 4002 :end 4217 :contents-begin 4002 :contents-end 4216 :robust-begin 4002 :robust-end 4214 :post-blank 1 :post-affiliated 4002 :mode section :granularity element :cached t :parent #79# :org-element--cache-sync-key nil)) 0] [nil nil #80# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4002 :end 4217 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package hideshow\12\11:hook ((prog-mode . hs-minor-mode)))\12\12  (defun toggle-fold ()\12\11(interactive)\12\11(save-excursion\12\11  (end-of-line)\12\11  (backward-char 1)\12\11  (hs-toggle-hiding)))\12" :post-blank 1 :post-affiliated 4002 :mode planning :granularity element :cached t :parent #81# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4230 :end 4291 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package restclient)\12" :post-blank 1 :post-affiliated 4230 :mode planning :granularity element :cached t :parent #83=(section (:begin 4230 :end 4291 :contents-begin 4230 :contents-end 4290 :robust-begin 4230 :robust-end 4288 :post-blank 1 :post-affiliated 4230 :mode section :granularity element :cached t :parent #80# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #89=(section (:begin 4307 :end 6015 :contents-begin 4307 :contents-end 6014 :robust-begin 4307 :robust-end 6012 :post-blank 1 :post-affiliated 4307 :mode section :granularity element :cached t :parent #82# :org-element--cache-sync-key nil)) 0] #82# 0] #83# 0] [[[nil nil #84# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6048 :end 7539 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; mark and edit all copies of the marked region simultaniously. \12  (use-package iedit\12    :ensure t)\12  \12  ;; if you're windened, narrow to the region, if you're narrowed, widen\12  ;; bound to C-x n\12  (defun narrow-or-widen-dwim (p)\12    \"If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.\12  Intelligently means: region, org-src-block, org-subtree, or defun,\12  whichever applies first.\12  Narrowing to org-src-block actually calls `org-edit-src-code'.\12  \12  With prefix P, don't widen, just narrow even if buffer is already\12  narrowed.\"\12    (interactive \"P\")\12    (declare (interactive-only))\12    (cond ((and (buffer-narrowed-p) (not p)) (widen))\12          ((region-active-p)\12           (narrow-to-region (region-beginning) (region-end)))\12          ((derived-mode-p 'org-mode)\12           ;; `org-edit-src-code' is not a real narrowing command.\12           ;; Remove this first conditional if you don't want it.\12           (cond ((ignore-errors (org-edit-src-code))\12                  (delete-other-windows))\12                 ((org-at-block-p)\12                  (org-narrow-to-block))\12                 (t (org-narrow-to-subtree))))\12          (t (narrow-to-defun))))\12  \12  ;; (define-key endless/toggle-map \"n\" #'narrow-or-widen-dwim)\12  ;; This line actually replaces Emacs' entire narrowing keymap, that's\12  ;; how much I like this command. Only copy it if that's what you want.\12  ;; (define-key ctl-x-map \"n\" #'narrow-or-widen-dwim) ;\12  \12" :post-blank 2 :post-affiliated 6048 :mode planning :granularity element :cached t :parent #85=(section (:begin 6048 :end 7574 :contents-begin 6048 :contents-end 7573 :robust-begin 6048 :robust-end 7571 :post-blank 1 :post-affiliated 6048 :mode section :granularity element :cached t :parent #84# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #85# 0] [[nil nil #88=(section (:begin 7582 :end 10737 :contents-begin 7582 :contents-end 10736 :robust-begin 7582 :robust-end 10734 :post-blank 1 :post-affiliated 7582 :mode section :granularity element :cached t :parent #86# :org-element--cache-sync-key nil)) 0] [nil nil #87# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7582 :end 10725 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package hydra \12    :ensure hydra\12    :init \12    (global-set-key\12     (kbd \"C-x t\")\12     (defhydra toggle (:color blue)\12       \"toggle\"\12       (\"a\" abbrev-mode \"abbrev\")\12       (\"s\" flyspell-mode \"flyspell\")\12       (\"d\" toggle-debug-on-error \"debug\")\12       (\"c\" fci-mode \"fCi\")\12       (\"f\" auto-fill-mode \"fill\")\12       (\"t\" toggle-truncate-lines \"truncate\")\12       (\"w\" whitespace-mode \"whitespace\")\12       (\"q\" nil \"cancel\")))\12  \12    (global-set-key\12     (kbd \"C-x j\")\12     (defhydra gotoline \12       ( :pre (linum-mode 1)\12         :post (linum-mode -1))\12       \"goto\"\12       (\"t\" (lambda () (interactive)(move-to-window-line-top-bottom 0)) \"top\")\12       (\"b\" (lambda () (interactive)(move-to-window-line-top-bottom -1)) \"bottom\")\12       (\"m\" (lambda () (interactive)(move-to-window-line-top-bottom)) \"middle\")\12       (\"e\" (lambda () (interactive)(end-of-buffer)) \"end\")\12       (\"c\" recenter-top-bottom \"recenter\")\12       (\"n\" next-line \"down\")\12       (\"p\" (lambda () (interactive) (forward-line -1))  \"up\")\12       (\"g\" goto-line \"goto-line\")\12       ))\12  \12    (global-set-key\12     (kbd \"C-c t\")\12     (defhydra hydra-global-org (:color blue)\12       \"Org\"\12       (\"t\" org-timer-start \"Start Timer\")\12       (\"s\" org-timer-stop \"Stop Timer\")\12       (\"r\" org-timer-set-timer \"Set Timer\") ; This one requires you be in an orgmode doc, as it sets the timer for the header\12       (\"p\" org-timer \"Print Timer\") ; output timer value to buffer\12       (\"w\" (org-clock-in '(4)) \"Clock-In\") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)\12       (\"o\" org-clock-out \"Clock-Out\") ; you might also want (setq org-log-note-clock-out t)\12       (\"j\" org-clock-goto \"Clock Goto\") ; global visit the clocked task\12       (\"c\" org-capture \"Capture\") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html\12       (\"l\" (or )rg-capture-goto-last-stored \"Last Capture\"))\12  \12     ))\12  \12  (defhydra hydra-multiple-cursors (:hint nil)\12    \"\12   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \\\"s\\\" \\\"\\\")\12  ------------------------------------------------------------------\12   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers\12   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters\12   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search\12   [Click] Cursor at point       [_q_] Quit\"\12    (\"l\" mc/edit-lines :exit t)\12    (\"a\" mc/mark-all-like-this :exit t)\12    (\"n\" mc/mark-next-like-this)\12    (\"N\" mc/skip-to-next-like-this)\12    (\"M-n\" mc/unmark-next-like-this)\12    (\"p\" mc/mark-previous-like-this)\12    (\"P\" mc/skip-to-previous-like-this)\12    (\"M-p\" mc/unmark-previous-like-this)\12    (\"s\" mc/mark-all-in-region-regexp :exit t)\12    (\"0\" mc/insert-numbers :exit t)\12    (\"A\" mc/insert-letters :exit t)\12    (\"<mouse-1>\" mc/add-cursor-on-click)\12    ;; Help with click recognition in this hydra\12    (\"<down-mouse-1>\" ignore)\12    (\"<drag-mouse-1>\" ignore)\12    (\"q\" nil)\12  \12  \12    (\"<mouse-1>\" mc/add-cursor-on-click)\12    (\"<down-mouse-1>\" ignore)\12    (\"<drag-mouse-1>\" ignore))\12  \12" :post-blank 1 :post-affiliated 7582 :mode planning :granularity element :cached t :parent #88# :org-element--cache-sync-key nil)) 0] #86# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4307 :end 6015 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Highlights the current cursor line\12  (global-hl-line-mode t)\12\12\12  (use-package projectile\12\11:ensure t\12\11:bind (\"C-c p\" . projectile-command-map)\12\11:config\12\11(projectile-global-mode)\12\11(setq projectile-completion-system 'ivy))\12\12  ;; (use-package smart-tabs-mode\12  ;;   :ensure t\12  ;;   :config\12  ;;   (smart-tabs-insinuate 'java ))\12\12  (use-package smartparens\12\11:ensure t\12\11:hook (prog-mode . smartparens-mode)\12\11:custom\12\11(sp-escape-quotes-after-insert nil)\12\11:config\12\11(require 'smartparens-config))\12\12  (show-paren-mode t)\12\12  ;; flashes the cursor's line when you scroll\12  (use-package beacon\12\11:ensure t\12\11:config\12\11(beacon-mode 1)\12\11;; (setq beacon-color \"#666600\")\12\11)\12\12  ;; deletes all the whitespace when you hit backspace or delete\12  (use-package hungry-delete\12\11:ensure t\12\11:config\12\11(global-hungry-delete-mode))\12\12\12  (use-package multiple-cursors\12\11:ensure t)\12\12  ;; expand the marked region in semantic increments (negative prefix to reduce region)\12  (use-package expand-region\12\11:ensure t\12\11:config \12\11(global-set-key (kbd \"C-=\") 'er/expand-region))\12\12  (setq save-interprogram-paste-before-kill t)\12\12\12  (global-auto-revert-mode 1) ;; you might not want this\12  (setq auto-revert-verbose nil) ;; or this\12  (global-set-key (kbd \"<f5>\") 'revert-buffer)\12\12  (setq backup-directory-alist '((\".\" . \"~/.emacs.d/backup\"))\12\11\11backup-by-copying t    ; Don't delink hardlinks\12\11\11version-control t      ; Use version numbers on backups\12\11\11delete-old-versions t  ; Automatically delete excess backups\12\11\11kept-new-versions 20   ; how many of the newest versions to keep\12\11\11kept-old-versions 5    ; and how many of the old\12\11\11)\12\12  (use-package yaml-mode\12\11:ensure t)\12\12  (use-package atomic-chrome\12\11:ensure t)\12" :post-blank 1 :post-affiliated 4307 :mode planning :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) 0] #79# 0] #69# 0] [[[[[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10750 :end 10828 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dockerfile-mode :ensure t)\12  \12" :post-blank 0 :post-affiliated 10750 :mode planning :granularity element :cached t :parent #148=(section (:begin 10750 :end 10828 :contents-begin 10750 :contents-end 10828 :robust-begin 10750 :robust-end 10826 :post-blank 0 :post-affiliated 10750 :mode section :granularity element :cached t :parent #87# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #93=(section (:begin 10834 :end 12360 :contents-begin 10834 :contents-end 12359 :robust-begin 10834 :robust-end 12357 :post-blank 1 :post-affiliated 10834 :mode section :granularity element :cached t :parent #90# :org-element--cache-sync-key nil)) 0] #90# 0] [[nil nil #91# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 12370 :end 13952 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (global-set-key (kbd \"C-x C-b\") 'ibuffer)\12  (setq ibuffer-saved-filter-groups\12        (quote ((\"default\"\12                 (\"dired\" (mode . dired-mode))\12                 (\"org\" (name . \"^.*org$\"))\12                 (\"magit\" (mode . magit-mode))\12                 (\"IRC\" (or (mode . circe-channel-mode) (mode . circe-server-mode)))\12                 (\"web\" (or (mode . web-mode) (mode . js2-mode)))\12                 (\"shell\" (or (mode . eshell-mode) (mode . shell-mode) (mode . term-mode)))\12                 (\"mu4e\" (or\12  \12                          (mode . mu4e-compose-mode)\12                          (name . \"\\*mu4e\\*\")\12                          ))\12                 (\"programming\" (or\12                                 (mode . python-ts-mode)\12                                 (mode . go-ts-mode)\12                                 (mode . rust-ts-mode)\12                                 (mode . c++-ts-mode)))\12                 (\"emacs\" (or\12                           (name . \"^\\\\*scratch\\\\*$\")\12                           (name . \"^\\\\*Messages\\\\*$\")))\12                 ))))\12  (add-hook 'ibuffer-mode-hook\12            (lambda ()\12              (ibuffer-auto-mode 1)\12              (ibuffer-switch-to-saved-filter-groups \"default\")))\12  \12  ;; don't show these\12                                          ;(add-to-list 'ibuffer-never-show-predicates \"zowie\")\12  ;; Don't show filter groups if there are no buffers in that group\12  (setq ibuffer-show-empty-filter-groups nil)\12  \12  ;; Don't ask for confirmation to delete marked buffers\12  (setq ibuffer-expert t)\12  \12" :post-blank 1 :post-affiliated 12370 :mode planning :granularity element :cached t :parent #92=(section (:begin 12370 :end 13952 :contents-begin 12370 :contents-end 13951 :robust-begin 12370 :robust-end 13949 :post-blank 1 :post-affiliated 12370 :mode section :granularity element :cached t :parent #91# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #92# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10834 :end 12360 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package magit\12    :ensure t\12    :init\12    (progn\12      (bind-key \"C-x g\" 'magit-status)\12      ))\12\12  ;; (setq magit-status-margin\12  ;;       '(t \"%Y-%m-%d %H:%M \" magit-log-margin-width t 18))\12\12  ;; (use-package git-gutter\12  ;;   :ensure t\12  ;;   :init\12  ;;   (global-git-gutter-mode +1))\12\12  ;; (global-set-key (kbd \"M-g M-g\") 'hydra-git-gutter/body)\12\12\12  (use-package git-timemachine\12    :ensure t)\12\12  ;; (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)\12  ;;                                       :hint nil)\12  ;;   \"\12  ;;   Git gutter:\12  ;;     _j_: next hunk        _s_tage hunk     _q_uit\12  ;;     _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter\12  ;;     ^ ^                   _p_opup hunk\12  ;;     _h_: first hunk\12  ;;     _l_: last hunk        set start _R_evision\12  ;;   \"\12  ;;   (\"j\" git-gutter:next-hunk)\12  ;;   (\"k\" git-gutter:previous-hunk)\12  ;;   (\"h\" (progn (goto-char (point-min))\12  ;;               (git-gutter:next-hunk 1)))\12  ;;   (\"l\" (progn (goto-char (point-min))\12  ;;               (git-gutter:previous-hunk 1)))\12  ;;   (\"s\" git-gutter:stage-hunk)\12  ;;   (\"r\" git-gutter:revert-hunk)\12  ;;   (\"p\" git-gutter:popup-hunk)\12  ;;   (\"R\" git-gutter:set-start-revision)\12  ;;   (\"q\" nil :color blue)\12  ;;   (\"Q\" (progn (git-gutter-mode -1)\12  ;;               ;; git-gutter-fringe doesn't seem to\12  ;;               ;; clear the markup right away\12  ;;               (sit-for 0.1)\12  ;;               (git-gutter:clear))\12  ;;    :color blue))\12\12\12\12" :post-blank 1 :post-affiliated 10834 :mode planning :granularity element :cached t :parent #93# :org-element--cache-sync-key nil)) 0] [[[nil nil #96=(section (:begin 13963 :end 15213 :contents-begin 13963 :contents-end 15212 :robust-begin 13963 :robust-end 15210 :post-blank 1 :post-affiliated 13963 :mode section :granularity element :cached t :parent #94# :org-element--cache-sync-key nil)) 0] [nil nil #95# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 13963 :end 15201 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package treemacs\12    :ensure t\12    :defer t\12    :config\12    (progn\12  \12      (setq treemacs-follow-after-init          t\12            treemacs-width                      35\12            treemacs-indentation                2\12            treemacs-git-integration            t\12            treemacs-collapse-dirs              3\12            treemacs-silent-refresh             nil\12            treemacs-change-root-without-asking nil\12            treemacs-sorting                    'alphabetic-desc\12            treemacs-show-hidden-files          t\12            treemacs-never-persist              nil\12            treemacs-is-never-other-window      nil\12            treemacs-goto-tag-strategy          'refetch-index)\12  \12      (treemacs-follow-mode t)\12      (treemacs-filewatch-mode t))\12    :bind\12    (:map global-map\12          ([f8]        . treemacs)\12          ([f9]        . treemacs-projectile)\12          (\"<C-M-tab>\" . treemacs)\12          (\"M-0\"       . treemacs-select-window)\12          (\"C-c 1\"     . treemacs-delete-other-windows)\12          ))\12  (use-package treemacs-projectile\12    :defer t\12    :ensure t\12    :config\12    (setq treemacs-header-function #'treemacs-projectile-create-header)\12    )\12  \12" :post-blank 1 :post-affiliated 13963 :mode planning :granularity element :cached t :parent #96# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15228 :end 15567 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package exec-path-from-shell\12    :ensure t\12    :config\12    (exec-path-from-shell-initialize)\12    )\12\12  (setenv \"HTTP_PROXY\" \"http://127.0.0.1:8001\")\12  (setenv \"HTTPS_PROXY\" \"http://127.0.0.1:8001\")\12  (setenv \"GOPROXY\" \"https://proxy.golang.com.cn,direct\")\12  (setenv \"GOPRIVATE\" \"git.thunics.com\")\12\12\12" :post-blank 1 :post-affiliated 15228 :mode planning :granularity element :cached t :parent #98=(section (:begin 15228 :end 15567 :contents-begin 15228 :contents-end 15566 :robust-begin 15228 :robust-end 15564 :post-blank 1 :post-affiliated 15228 :mode section :granularity element :cached t :parent #95# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #108=(section (:begin 15577 :end 15704 :contents-begin 15577 :contents-end 15703 :robust-begin 15577 :robust-end 15701 :post-blank 1 :post-affiliated 15577 :mode section :granularity element :cached t :parent #97# :org-element--cache-sync-key nil)) 0] #97# 0] #98# 0] #94# 0] [[[[nil nil #99# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15717 :end 17212 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package js2-mode\12    :ensure t\12    :ensure ac-js2\12    :init\12    (progn\12      (add-hook 'js-mode-hook 'js2-minor-mode)\12      (add-hook 'js2-mode-hook 'ac-js2-mode)\12      ))\12  \12  (use-package js2-refactor\12    :ensure t\12    :config \12    (progn\12      (js2r-add-keybindings-with-prefix \"C-c C-m\")\12      ;; eg. extract function with `C-c C-m ef`.\12      (add-hook 'js2-mode-hook #'js2-refactor-mode)))\12  \12  ;; (use-package tern\12  ;;   :ensure tern\12  ;;   :ensure tern-auto-complete\12  ;;   :config\12  ;;   (progn\12  ;;     (add-hook 'js-mode-hook (lambda () (tern-mode t)))\12  ;;     (add-hook 'js2-mode-hook (lambda () (tern-mode t)))\12  ;;     (add-to-list 'auto-mode-alist '(\"\\\\.js\\\\'\" . js2-mode))\12  ;;     ;;(tern-ac-setup)\12  ;;     ))\12  \12  ;;(use-package jade\12  ;;:ensure t\12  ;;)\12  \12  \12  \12  ;; turn on flychecking globally\12  (add-hook 'after-init-hook #'global-flycheck-mode)\12  \12  ;; disable jshint since we prefer eslint checking\12  (setq-default flycheck-disabled-checkers\12                (append flycheck-disabled-checkers\12                        '(javascript-jshint)))\12  \12  ;; use eslint with web-mode for jsx files\12  (flycheck-add-mode 'javascript-eslint 'web-mode)\12  \12  ;; customize flycheck temp file prefix\12  (setq-default flycheck-temp-prefix \".flycheck\")\12  \12  ;; disable json-jsonlist checking for json files\12  (setq-default flycheck-disabled-checkers\12                (append flycheck-disabled-checkers\12                        '(json-jsonlist)))\12  \12\12" :post-blank 1 :post-affiliated 15717 :mode planning :granularity element :cached t :parent #100=(section (:begin 15717 :end 17212 :contents-begin 15717 :contents-end 17211 :robust-begin 15717 :robust-end 17209 :post-blank 1 :post-affiliated 15717 :mode section :granularity element :cached t :parent #99# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #100# 0] [[nil nil #103=(section (:begin 17223 :end 17782 :contents-begin 17223 :contents-end 17781 :robust-begin 17223 :robust-end 17779 :post-blank 1 :post-affiliated 17223 :mode section :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] [nil nil #102# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17223 :end 17782 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package web-mode\12    :ensure t)\12\12  ;; adjust indents for web-mode to 2 spaces\12\12  (defun my-web-mode-hook ()\12    \"Hooks for Web mode. Adjust indents\"\12    (setq web-mode-markup-indent-offset 4)\12    (setq web-mode-css-indent-offset 4)\12    (setq web-mode-code-indent-offset 4))\12  (add-hook 'web-mode-hook  'my-web-mode-hook)\12\12  (add-to-list 'auto-mode-alist '(\"\\\\.html?\\\\'\" . web-mode))\12  (add-to-list 'auto-mode-alist '(\"\\\\.svelte\\\\'\" . web-mode))\12  (setq web-mode-engines-alist \12        '((\"svelte\" . \"\\\\.svelte\\\\'\")))\12" :post-blank 1 :post-affiliated 17223 :mode planning :granularity element :cached t :parent #103# :org-element--cache-sync-key nil)) 0] #101# 0] [[[nil nil (paragraph (:begin 17791 :end 17815 :contents-begin 17791 :contents-end 17815 :post-blank 0 :post-affiliated 17791 :mode planning :granularity element :cached t :parent #104=(section (:begin 17791 :end 18923 :contents-begin 17791 :contents-end 18922 :robust-begin 17791 :robust-end 18920 :post-blank 1 :post-affiliated 17791 :mode section :granularity element :cached t :parent #102# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17887 :end 18923 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;; (use-package go-mode\12  ;;   :ensure t)\12\12  ;; (use-package gomacro-mode\12  ;;   :hook (go-mode . gomacro-mode)\12  ;;   :config (setq gomacro-command \"gomacro_proxy\") ;use proxy when getting package in gomacro\12  ;;   )\12\12\12  ;; (defun my-go-mode-hook ()\12  ;;   ; Use goimports instead of go-fmt\12  ;;   ;(setq gofmt-command \"goimports\")\12  ;;   ; Call Gofmt before saving\12  ;;   (add-hook 'before-save-hook 'gofmt-before-save)\12  ;;   (setq tab-width 4)\12  ;;   (setq indent-tabs-mode nil)\12  ;;   ; Customize compile command to run go build\12  ;;   (if (not (string-match \"go\" compile-command))\12  ;;       (set (make-local-variable 'compile-command)\12  ;;            \"go build -v && go test -v && go vet\"))\12  ;;   ; Godef jump key binding\12  ;;   ;(local-set-key (kbd \"M-.\") 'godef-jump)\12  ;;   ;(local-set-key (kbd \"M-*\") 'pop-tag-mark)\12  ;; )\12\12  ;; (add-hook 'go-mode-hook 'my-go-mode-hook)\12  ;; (add-hook 'go-ts-mode-hook 'my-go-mode-hook)\12\12  ;; just using go-ts-mode\12\12  (setq go-ts-mode-indent-offset 4)\12\12" :post-blank 1 :post-affiliated 17887 :mode nil :granularity element :cached t :parent #104# :org-element--cache-sync-key nil)) 0] (src-block (:language "shell" :switches nil :parameters nil :begin 17815 :end 17887 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  go get golang.org/x/tools/gopls@latest\12" :post-blank 1 :post-affiliated 17815 :mode nil :granularity element :cached t :parent #104# :org-element--cache-sync-key nil)) 0] [[nil nil #107=(section (:begin 18932 :end 19111 :contents-begin 18932 :contents-end 19111 :robust-begin 18932 :robust-end 19109 :post-blank 0 :post-affiliated 18932 :mode section :granularity element :cached t :parent #105# :org-element--cache-sync-key nil)) 0] [nil nil #106# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18932 :end 19111 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package rust-mode\12    :ensure t\12    :hook (rust-ts-mode . (lambda () (setq indent-tabs-mode nil)))\12    :custom (rust-format-on-save t))\12  \12" :post-blank 0 :post-affiliated 18932 :mode planning :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] #105# 0] #104# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15577 :end 15704 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package deadgrep \12    :ensure t)\12  \12  (use-package rg\12    :ensure t\12    :commands rg)\12" :post-blank 1 :post-affiliated 15577 :mode planning :granularity element :cached t :parent #108# :org-element--cache-sync-key nil)) 0] [[[[[nil nil (paragraph (:begin 19121 :end 19133 :contents-begin 19121 :contents-end 19133 :post-blank 0 :post-affiliated 19121 :mode planning :granularity element :cached t :parent #110=(section (:begin 19121 :end 19292 :contents-begin 19121 :contents-end 19292 :robust-begin 19121 :robust-end 19290 :post-blank 0 :post-affiliated 19121 :mode section :granularity element :cached t :parent #106# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #109# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19133 :end 19292 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package treesit-auto\12    :demand t\12    :config\12    (setq treesit-auto-install 'prompt)\12    (global-treesit-auto-mode))\12" :post-blank 0 :post-affiliated 19133 :mode nil :granularity element :cached t :parent #110# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19304 :end 19373 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq c-ts-mode-indent-offset 4)\12" :post-blank 1 :post-affiliated 19304 :mode planning :granularity element :cached t :parent #112=(section (:begin 19304 :end 19373 :contents-begin 19304 :contents-end 19372 :robust-begin 19304 :robust-end 19370 :post-blank 1 :post-affiliated 19304 :mode section :granularity element :cached t :parent #109# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #117=(section (:begin 19381 :end 19735 :contents-begin 19381 :contents-end 19734 :robust-begin 19381 :robust-end 19732 :post-blank 1 :post-affiliated 19381 :mode section :granularity element :cached t :parent #111# :org-element--cache-sync-key nil)) 0] #111# 0] #112# 0] [[[nil nil #113# 0] [nil nil (paragraph (:begin 19746 :end 19833 :contents-begin 19746 :contents-end 19833 :post-blank 0 :post-affiliated 19746 :mode planning :granularity element :cached t :parent #114=(section (:begin 19746 :end 22421 :contents-begin 19746 :contents-end 22421 :robust-begin 19746 :robust-end 22419 :post-blank 0 :post-affiliated 19746 :mode section :granularity element :cached t :parent #113# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #114# 0] [[nil nil #115# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22433 :end 22815 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package lsp-java\11\11\11\11\11;\12  ;;   :ensure t\12  ;;   :after lsp\12  ;;   :config \12  ;;   (add-hook 'java-mode-hook 'lsp))\12  \12  ;; (use-package dap-mode\12  ;;   :ensure t\12  ;;   :after lsp-mode\12  ;;   :config\12  ;;   (dap-mode t)\12  ;;   (dap-ui-mode t))\12  \12  ;; (use-package dap-java :after (lsp-java))\12  \12  ;; (use-package kotlin-mode :ensure t)\12  \12" :post-blank 0 :post-affiliated 22433 :mode planning :granularity element :cached t :parent #116=(section (:begin 22433 :end 22815 :contents-begin 22433 :contents-end 22815 :robust-begin 22433 :robust-end 22813 :post-blank 0 :post-affiliated 22433 :mode section :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #116# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19833 :end 22421 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\11\11\11\11\11  ;(setq lsp-use-plists t)\12  ;; (use-package lsp-mode\12  ;;   :ensure t\12  ;;   :commands (lsp lsp-deferred)\12  ;;   :custom\12  ;;   (lsp-auto-guess-root nil)\12  ;;   (lsp-prefer-flymake nil) ; Use flycheck instead of flymake\12  ;;   :bind (:map lsp-mode-map (\"C-c C-f\" . lsp-format-buffer))\12  ;;   :hook \12  ;;   (python-mode . lsp-deferred) \12  ;;   (go-mode . lsp-deferred)\12  ;;   (rust-mode . lsp-deferred)\12  ;;   (java-mode . lsp-deferred)\12  ;;   (web-mode . lsp-deferred)\12  ;;   (js-mode . lsp-deferred))\12\12  ;; (use-package lsp-pyright\12  ;;   :ensure t\12  ;;   :hook (python-mode . (lambda () (require 'lsp-pyright))))\12\12  ;; (setq lsp-modeline-diagnostics-enable t)\12  ;; (setq lsp-modeline-diagnostics-scope :workspace)\12\12  ;; (use-package lsp-ui\12  ;;   :ensure t\12  ;;   :after lsp-mode\12  ;;   :diminish\12  ;;   :commands lsp-ui-mode\12  ;;   :custom-face\12  ;;   (lsp-ui-doc-background ((t (:background nil))))\12  ;;   (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))\12  ;;   :bind (:map lsp-ui-mode-map\12  ;;               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)\12  ;;               ([remap xref-find-references] . lsp-ui-peek-find-references)\12  ;;               (\"C-c u\" . lsp-ui-imenu))\12  ;;   :custom\12  ;;   (lsp-ui-doc-enable t)\12  ;;   (lsp-ui-doc-header t)\12  ;;   (lsp-ui-doc-include-signature t)\12  ;;   (lsp-ui-doc-position 'top)\12  ;;   (lsp-ui-doc-border (face-foreground 'default))\12  ;;   (lsp-ui-sideline-enable t)\12  ;;   (lsp-ui-sideline-ignore-duplicate t)\12  ;;   (lsp-ui-sideline-show-code-actions t)\12  ;;   (lsp-ui-flycheck-enable t)\12\12  ;;   :config\12  ;;   ;; (setq lsp-ui-sideline-show-hover t\12  ;;   ;;               lsp-ui-sideline-delay 0.5\12  ;;   ;;               lsp-ui-doc-delay 5\12  ;;   ;;               lsp-ui-sideline-ignore-duplicates t\12  ;;   ;;               lsp-ui-doc-position 'bottom\12  ;;   ;;               lsp-ui-doc-alignment 'frame\12  ;;   ;;               lsp-ui-doc-header nil\12  ;;   ;;               lsp-ui-doc-include-signature t\12  ;;   ;;               lsp-ui-doc-use-childframe t)\12\12  ;;   ;; Use lsp-ui-doc-webkit only in GUI\12  ;;                                         ;(setq lsp-ui-doc-use-webkit t)\12\12  ;;   ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer\12  ;;   ;; https://github.com/emacs-lsp/lsp-ui/issues/243\12\12  ;;   ;; (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)\12  ;;   ;; \11(setq mode-line-format nil))\12\12  ;;   )\12\12  ;; ;; performance tweeks\12\12  ;; (setq gc-cons-threshold 100000000)\12  ;; (setq read-process-output-max (* 1024 1024)) ;; 1mb\12" :post-blank 0 :post-affiliated 19833 :mode nil :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19381 :end 19735 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'go-ts-mode-hook 'eglot-ensure)\12  (add-hook 'python-ts-mode-hook 'eglot-ensure)\12  (add-hook 'c-ts-mode-hook 'eglot-ensure)\12  (add-hook 'c++-ts-mode-hook 'eglot-ensure)\12  (add-hook 'cmake-ts-mode 'eglot-ensure)\12  (use-package eldoc-box)\12  (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-at-point-mode t)\12" :post-blank 1 :post-affiliated 19381 :mode planning :granularity element :cached t :parent #117# :org-element--cache-sync-key nil)) 0] [[[[nil nil #120=(section (:begin 22831 :end 22908 :contents-begin 22831 :contents-end 22908 :robust-begin 22831 :robust-end 22906 :post-blank 0 :post-affiliated 22831 :mode section :granularity element :cached t :parent #118# :org-element--cache-sync-key nil)) 0] [nil nil #119# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 22831 :end 22908 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package protobuf-mode\12    :ensure t)\12" :post-blank 0 :post-affiliated 22831 :mode planning :granularity element :cached t :parent #120# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 22919 :end 22943 :contents-begin 22919 :contents-end 22943 :post-blank 0 :post-affiliated 22919 :mode planning :granularity element :cached t :parent #122=(section (:begin 22919 :end 36097 :contents-begin 22919 :contents-end 36097 :robust-begin 22919 :robust-end 36095 :post-blank 0 :post-affiliated 22919 :mode section :granularity element :cached t :parent #119# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #121# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":lexical t" :begin 22943 :end 36097 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org \12    :ensure t\12    :pin org)\12\12  (require 'org-tempo)\12                                          ;(setenv \"BROWSER\" \"firefox\")\12\12  (use-package org-bullets\12    :ensure t\12    :config\12    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))\12\12  (custom-set-variables\12   '(org-directory \"~/RoamNotes\")\12   '(org-default-notes-file (concat org-directory \"/Inbox.org\"))\12   '(org-export-html-postamble nil)\12   '(org-hide-leading-stars t)\12   '(org-startup-folded (quote overview))\12   '(org-startup-indented t)\12   '(org-pretty-entities t)\12   '(org-hide-emphasis-markers t)\12   '(org-startup-with-inline-images t)\12   '(org-confirm-babel-evaluate nil)\12   '(org-src-fontify-natively t)\12   '(org-tags-column 76)\12   '(org-complete-tags-always-offer-all-agenda-tags t)\12   )\12\12  ;; Drop rows with zero time in org-mode agenda clockreport\12  (setq org-agenda-clockreport-parameter-plist\12        '(:stepskip0 t :link t :maxlevel 3 :fileskip0 t :tags t))\12\12  (use-package org-appear\12    :ensure t\12    :hook (org-mode . org-appear-mode))\12\12  (setq org-file-apps\12        (append '((\"\\\\.docx\\\\'\" . default)\12                  (\"\\\\.pptx\\\\'\" . default))\12                org-file-apps))\12\12  (global-set-key \"\\C-ca\" 'org-agenda)\12  (define-key global-map (kbd \"C-c l\") 'org-store-link)\12\12  (setq org-todo-keywords\12        (quote ((sequence \"TODO(t)\" \"NEXT(n)\" \"|\" \"DONE(d/!)\")\12                (sequence \"WAITING(w@/!)\" \"HOLD(h@/!)\" \"|\" \"CANCELLED(c@/!)\" \"PHONE\" \"MEETING\"))))\12\12  (setq org-todo-keyword-faces\12        (quote ((\"TODO\" :foreground \"red\" :weight bold)\12                (\"NEXT\" :foreground \"light blue\" :weight bold)\12                (\"DONE\" :foreground \"green\" :weight bold)\12                (\"WAITING\" :foreground \"orange\" :weight bold)\12                (\"HOLD\" :foreground \"magenta\" :weight bold)\12                (\"CANCELLED\" :foreground \"forest green\" :weight bold)\12                (\"MEETING\" :foreground \"green\" :weight bold)\12                (\"PHONE\" :foreground \"green\" :weight bold))))\12\12  (setq org-refile-targets '((nil :maxlevel . 1)\12                             (org-agenda-files :maxlevel . 1)))\12  (setq org-outline-path-complete-in-steps nil)\12\12  (setq org-agenda-start-on-weekday nil)\12  (setq org-agenda-custom-commands\12        '((\"c\" \"Simple agenda view\"\12           ((agenda \"\" ((org-agenda-span 'day)))\12            (alltodo \"\" ((org-agenda-todo-ignore-with-date 'all)))))\12          (\"o\" \"Objective agenda view\"\12           ((agenda \"\")\12            (alltodo \"\" ((org-agenda-todo-ignore-scheduled 'all))))\12           ((org-agenda-tag-filter-preset '(\"+努力做到最好\"))))\12          (\"p\" \"Private agenda view\"\12           ((agenda \"\")\12            (alltodo \"\" ((org-agenda-todo-ignore-scheduled 'all))))\12           ((org-agenda-tag-filter-preset '(\"-smartbow\"))))))\12\12  (global-set-key (kbd \"C-c c\") 'org-capture)\12\12  ;; (setq org-agenda-files\12  ;;       (list org-directory))\12\12  ;; (setq org-agenda-files \12  ;;       (list \12  ;;        (concat org-directory \"/gtd.org\")\12  ;;        (concat org-directory \"/smartbow.org\")\12  ;;        (concat org-directory \"/journal.org\")\12  ;;        (concat org-directory \"/inbox.org\")))\12\12  (setq org-capture-templates\12        '((\"l\" \"Link\" entry (file+headline \"~/org/inbox.org\" \"Links\")\12           \"* %? %^L %^g \\n%T\" :prepend t)\12          (\"t\" \"To Do Item\" entry (file+headline \"~/org/inbox.org\" \"Tasks\")\12           \"* TODO %?\\n%u\" :prepend t)\12          (\"n\" \"Note\" entry (file+headline \"~/org/inbox.org\" \"Notes\")\12           \"* %u %? \" :prepend t)\12          ))\12\12\12  (defadvice org-capture-finalize \12      (after delete-capture-frame activate)  \12    \"Advise capture-finalize to close the frame\"  \12    (if (equal \"capture\" (frame-parameter nil 'name))  \12        (delete-frame)))\12\12  (defadvice org-capture-destroy \12      (after delete-capture-frame activate)  \12    \"Advise capture-destroy to close the frame\"  \12    (if (equal \"capture\" (frame-parameter nil 'name))  \12        (delete-frame)))  \12\12  ;; (use-package noflet\12  ;;   :ensure t )\12  ;; (defun make-capture-frame ()\12  ;;   \"Create a new frame and run org-capture.\"\12  ;;   (interactive)\12  ;;   (make-frame '((name . \"capture\")))\12  ;;   (select-frame-by-name \"capture\")\12  ;;   (delete-other-windows)\12  ;;   (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))\12  ;;     (org-capture)))\12\12  ;; ;; (require 'ox-beamer)\12  ;; ;; for inserting inactive dates\12  ;; (define-key org-mode-map (kbd \"C-c >\") (lambda () (interactive (org-time-stamp-inactive))))\12\12\12  (use-package htmlize :ensure t)\12\12  ;; org-download\12  (use-package org-download\12    :ensure t\12    :config\12    (add-hook 'dired-mode-hook 'org-download-enable)\12    (setq-default org-download-image-dir \"~/RoamNotes/images\")\12    )\12\12  ;;(setq org-image-actual-width (/ (display-pixel-width) 3))\12  (setq org-image-actual-width nil)\12\12  ;; Org-Roam configuration\12\12  (use-package org-roam\12    :ensure t\12    :demand t  ;; Ensure org-roam is loaded by default\12    :init\12    (setq org-roam-v2-ack t)\12    :custom\12    (org-roam-directory \"~/RoamNotes\")\12    (org-roam-completion-everywhere t)\12    :bind ((\"C-c n l\" . org-roam-buffer-toggle)\12           (\"C-c n f\" . org-roam-node-find)\12           (\"C-c n i\" . org-roam-node-insert)\12           (\"C-c n I\" . org-roam-node-insert-immediate)\12           (\"C-c n g\" . org-roam-tag-add)\12           (\"C-c n p\" . my/org-roam-find-project)\12           (\"C-c n t\" . my/org-roam-capture-task)\12           (\"C-c n b\" . my/org-roam-capture-inbox)\12           (\"C-c n r\" . my/org-roam-refresh-agenda-list)\12           (\"C-c n a\" . org-roam-alias-add)\12           :map org-mode-map\12           (\"C-M-i\" . completion-at-point)\12           :map org-roam-dailies-map\12           (\"Y\" . org-roam-dailies-capture-yesterday)\12           (\"T\" . org-roam-dailies-capture-tomorrow))\12    :bind-keymap\12    (\"C-c n d\" . org-roam-dailies-map)\12    :config\12    (require 'org-roam-dailies) ;; Ensure the keymap is available\12    (require 'org-roam-protocol)\12    (org-roam-db-autosync-mode))\12\12  ;; (setq org-roam-dailies-capture-templates\12  ;; \11  '((\"d\" \"default\" entry \"* %?\" :target\12  ;;   (file+head \"%<%Y-%m-%d>.org\" \"#+title: %<%Y-%m-%d>\"))))\12\12  ;; (defun my/daily-templates ()\12  ;;   (format \"Hello world %s\" (plist-get org-capture-plist :day)))\12\12  ;; (setq org-roam-dailies-capture-templates\12  ;;       `((\"d\" \"default\" plain\12  ;; \11\11 (function my/daily-templates)\12  ;;          :target\12  ;;          (file \"%<%Y-%m-%d>.org\")\12  ;; \11\11 :day \"aaabbb\")))\12\12\12  (setq org-roam-dailies-capture-templates\12        `((\"d\" \"default\" entry \"* %?\" \12           :target\12           (file+head \"%<%Y-%m-%d>.org\"\12                      ,(concat \"#+title: %<%Y-%m-%d>\\n#+filetags: Daily\\n\" \12                               \"* 晨间日记\\n\"\12                               \"** 清晨元时间 [0/5]\\n\"\12                               \"- [ ] 起床\\n\"\12                               \"- [ ] 八段锦\\n\"\12                               \"- [ ] 洗头\\n\"\12                               \"** 午后 [0/2]\\n\"\12                               \"- [ ] 午休\\n\"\12                               \"- [ ] 站桩休息一下\\n\"\12                               \"** WOOP\\n\"\12                               \"- Wish :: \\n\"\12                               \"- Outcome :: \\n\"\12                               \"- Obstacles :: \\n\"\12                               \"- Plan :: \\n\"\12                               \"** 重要的事 [/]\\n\"\12                               \"- [ ] \\n\"\12                               \"- [ ] \\n\"\12                               \"- [ ] \\n\"\12                               \"** 触动和感悟\\n\"\12                               \"*** 美好时光日志\\n\\n\"\12                               \"*** 低沉时光日志\\n\\n\"\12                               \"*** 其他\\n\\n\"\12                               \"* Notes\\n\\n\"\12                               \"* Tasks\\n\"\12                               )))))\12\12  (setq org-roam-capture-ref-templates\12        '((\"w\" \"webpage\" plain\12           \"\\n${body}\\n%?\"\12           :target (file+head \"%<%Y%m%d%H%M%S>-${slug}.org\" \"#+title: ${title}\\n\\n\")\12           :unnarrowed t)))\12\12\12  (defun org-roam-node-insert-immediate (arg &rest args)\12    (interactive \"P\")\12    (let ((args (push arg args))\12          (org-roam-capture-templates (list (append (car org-roam-capture-templates)\12                                                    '(:immediate-finish t)))))\12      (apply #'org-roam-node-insert args)))\12\12  (defun my/org-roam-filter-by-tag (tag-name)\12    (lambda (node)\12      (member tag-name (org-roam-node-tags node))))\12\12  (defun my/org-roam-list-notes-by-tag (tag-name)\12    (mapcar #'org-roam-node-file\12            (seq-filter\12             (my/org-roam-filter-by-tag tag-name)\12             (org-roam-node-list))))\12\12  (defun my/org-roam-refresh-agenda-list ()\12    (interactive)\12    (setq org-agenda-files\12          (delete-dups (my/org-roam-list-notes-by-tag \"Project\"))))\12\12  ;; (defun my/org-roam-refresh-agenda-list ()\12  ;;   (interactive)\12  ;;   (setq org-agenda-files (my/org-roam-list-notes-by-tag \"Project\")))\12\12  ;; Build the agenda list the first time for the session\12  (my/org-roam-refresh-agenda-list)\12\12  (defun my/org-roam-project-finalize-hook ()\12    \"Adds the captured project file to `org-agenda-files' if the\12      capture was not aborted.\"\12    ;; Remove the hook since it was added temporarily\12    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)\12\12    ;; Add project file to the agenda list if the capture was confirmed\12    (unless org-note-abort\12      (with-current-buffer (org-capture-get :buffer)\12        (add-to-list 'org-agenda-files (buffer-file-name)))))\12\12  (defun my/org-roam-find-project ()\12    (interactive)\12    ;; Add the project file to the agenda after capture is finished\12    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)\12\12    ;; Select a project file to open, creating it if necessary\12    (org-roam-node-find\12     nil\12     nil\12     (my/org-roam-filter-by-tag \"Project\")\12     :templates\12     '((\"p\" \"project\" plain\12        \"* Goals\\n\\n%?\\n\\n* Tasks\\n\\n** TODO Add initial tasks\\n\\n* Dates\\n\\n\"\12        :if-new (file+head \"%<%Y%m%d%H%M%S>-${slug}.org\" \"#+title: ${title}\\n#+category: ${title}\\n#+filetags: Project\")\12        :unnarrowed t))))\12\12  (defun my/org-roam-capture-inbox ()\12    (interactive)\12    (org-roam-capture- :node (org-roam-node-create)\12                       :templates '((\"i\" \"inbox\" plain \"* %?\"\12                                     :if-new (file+head \"Inbox.org\" \"#+title: Inbox\\n\")))))\12\12  (defun my/org-roam-capture-task ()\12    (interactive)\12    ;; Add the project file to the agenda after capture is finished\12    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)\12\12    ;; Capture the new task, creating the project file if necessary\12    (org-roam-capture- :node (org-roam-node-read\12                              nil\12                              (my/org-roam-filter-by-tag \"Project\"))\12                       :templates '((\"p\" \"project\" plain \"** TODO %?\"\12                                     :if-new (file+head+olp \"%<%Y%m%d%H%M%S>-${slug}.org\"\12                                                            \"#+title: ${title}\\n#+category: ${title}\\n#+filetags: Project\"\12                                                            (\"Tasks\"))))))\12\12  (defun my/org-roam-copy-todo-to-today ()\12    (interactive)\12    (let ((org-refile-keep t) ;; Set this to nil to delete the original!\12          (org-roam-dailies-capture-templates\12           '((\"t\" \"tasks\" entry \"%?\"\12              :if-new (file+head+olp \"%<%Y-%m-%d>.org\" \"#+title: %<%Y-%m-%d>\\n\" (\"Tasks\")))))\12          (org-after-refile-insert-hook #'save-buffer)\12          today-file\12          pos)\12      (save-window-excursion\12        (org-roam-dailies--capture (current-time) t)\12        (setq today-file (buffer-file-name))\12        (setq pos (point)))\12\12      ;; Only refile if the target file is different than the current file\12      (unless (equal (file-truename today-file)\12                     (file-truename (buffer-file-name)))\12        (org-refile nil nil (list \"Tasks\" today-file nil pos)))))\12\12  (add-to-list 'org-after-todo-state-change-hook\12               (lambda ()\12                 (when (equal org-state \"DONE\")\12                   (my/org-roam-copy-todo-to-today))))\12\12  (setq org-roam-mode-section-functions\12        (list #'org-roam-backlinks-section\12              #'org-roam-reflinks-section\12              #'org-roam-unlinked-references-section\12              ))\12\12  (add-to-list 'display-buffer-alist\12               '(\"\\\\*org-roam\\\\*\"\12                 (display-buffer-in-side-window)\12                 (side . right)\12                 (slot . 0)\12                 (window-width . 76)\12                 (window-parameters . ((no-other-window . t)\12                                       (no-delete-other-windows . t)))))\12  (use-package deft\12    :config\12    (setq deft-directory org-directory\12          deft-recursive t\12          deft-strip-summary-regexp \":PROPERTIES:\\n\\\\(.+\\n\\\\)+:END:\\n\"\12          deft-use-filename-as-title t)\12    :bind\12    (\"C-c n s\" . deft))\11\11\11\11\11;search\12\12  (use-package org-roam-ui\12    :after org-roam\12    :config\12    (setq org-roam-ui-sync-theme t\12          org-roam-ui-follow t\12          org-roam-ui-update-on-save t\12          org-roam-ui-open-on-start t))\12" :post-blank 0 :post-affiliated 22943 :mode nil :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) 0] #122# 0] [[[nil nil (paragraph (:begin 36112 :end 36316 :contents-begin 36112 :contents-end 36315 :post-blank 1 :post-affiliated 36112 :mode planning :granularity element :cached t :parent #124=(section (:begin 36112 :end 36506 :contents-begin 36112 :contents-end 36506 :robust-begin 36112 :robust-end 36504 :post-blank 0 :post-affiliated 36112 :mode section :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #123# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36316 :end 36506 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'org-mac-link)\12  (add-hook 'org-mode-hook (lambda () \12                             (define-key org-mode-map (kbd \"C-c g\") 'org-mac-grab-link)))  \12" :post-blank 0 :post-affiliated 36316 :mode nil :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36516 :end 36906 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package company\12    :ensure t\12    :config\12    (setq company-idle-delay 0)\12    (setq company-minimum-prefix-length 3)\12    (setq company-selection-wrap-around t)\12\12    (global-company-mode t))\12\12  ;; (use-package company-lsp\12  ;;   :ensure t\12  ;;   :config\12  ;;   (setq compnay-lsp-enable-snippet t)\12  ;;   (push 'company-lsp company-backends)\12  ;;   )\12\12" :post-blank 0 :post-affiliated 36516 :mode planning :granularity element :cached t :parent #126=(section (:begin 36516 :end 36906 :contents-begin 36516 :contents-end 36906 :robust-begin 36516 :robust-end 36904 :post-blank 0 :post-affiliated 36516 :mode section :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #127=(section (:begin 36917 :end 37184 :contents-begin 36917 :contents-end 37183 :robust-begin 36917 :robust-end 37181 :post-blank 1 :post-affiliated 36917 :mode section :granularity element :cached t :parent #125# :org-element--cache-sync-key nil)) 0] #125# 0] #126# 0] #124# 0] #118# 0] #110# 0] [[[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36935 :end 37184 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package markdown-mode)\12  (add-to-list 'auto-mode-alist '(\"\\\\.md.html\\\\'\" . markdown-mode))\12  (use-package grip-mode\12    :ensure t\12    :bind (:map markdown-mode-command-map\12                (\"g\" . grip-mode)))\12" :post-blank 1 :post-affiliated 36935 :mode nil :granularity element :cached t :parent #127# :org-element--cache-sync-key nil)) 0] [nil nil #129=(section (:begin 37204 :end 38189 :contents-begin 37204 :contents-end 38189 :robust-begin 37204 :robust-end 38187 :post-blank 0 :post-affiliated 37204 :mode section :granularity element :cached t :parent #128# :org-element--cache-sync-key nil)) 0] #128# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 37224 :end 38189 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (progn\12      ;; set font for emoji (if before emacs 28, should come after setting symbols. emacs 28 now has 'emoji . before, emoji is part of 'symbol)\12      (set-fontset-font\12       t\12       (if (version< emacs-version \"28.1\")\12           '(#x1f300 . #x1fad0)\12         'emoji\12         )\12       (cond\12        ((member \"Apple Color Emoji\" (font-family-list)) \"Apple Color Emoji\")      \12        ((member \"Noto Color Emoji\" (font-family-list)) \"Noto Color Emoji\")\12        ((member \"Noto Emoji\" (font-family-list)) \"Noto Emoji\")\12        ((member \"Segoe UI Emoji\" (font-family-list)) \"Segoe UI Emoji\")\12        ((member \"Symbola\" (font-family-list)) \"Symbola\"))))\12\12\12    ;; (set-fontset-font\12    ;;  t 'symbol (font-spec :family \"Apple Color Emoji\") nil 'prepend)\12\12    (use-package company-emoji\12      :ensure t)\12\12    (use-package company\12      :ensure t\12      :config\12      ;; ...\12      (add-to-list 'company-backends 'company-emoji))\12\12" :post-blank 0 :post-affiliated 37224 :mode nil :granularity element :cached t :parent #129# :org-element--cache-sync-key nil)) 0] [nil nil #136=(section (:begin 38196 :end 38371 :contents-begin 38196 :contents-end 38371 :robust-begin 38196 :robust-end 38369 :post-blank 0 :post-affiliated 38196 :mode section :granularity element :cached t :parent #130# :org-element--cache-sync-key nil)) 0] #130# 0] (paragraph (:begin 37204 :end 37224 :contents-begin 37204 :contents-end 37224 :post-blank 0 :post-affiliated 37204 :mode planning :granularity element :cached t :parent #129# :org-element--cache-sync-key nil)) 0] [[[nil nil #131# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38386 :end 38550 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'after-init-hook 'recentf-mode)\12  (setq-default\12   recentf-max-saved-items 1000\12   recentf-exclude '(\"/tmp/\" \"/ssh:\"))\12" :post-blank 0 :post-affiliated 38386 :mode planning :granularity element :cached t :parent #132=(section (:begin 38386 :end 38550 :contents-begin 38386 :contents-end 38550 :robust-begin 38386 :robust-end 38548 :post-blank 0 :post-affiliated 38386 :mode section :granularity element :cached t :parent #131# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #132# 0] [[nil nil #135=(section (:begin 38565 :end 38764 :contents-begin 38565 :contents-end 38764 :robust-begin 38565 :robust-end 38762 :post-blank 0 :post-affiliated 38565 :mode section :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] [nil nil #134# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38565 :end 38764 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package cnfonts\12    :ensure t\12    :config (cnfonts-enable)\12    :bind ((\"C-M-=\" . cnfonts-increase-fontsize)\12           (\"C-M--\" . cnfonts-decrease-fontsize)))\12" :post-blank 0 :post-affiliated 38565 :mode planning :granularity element :cached t :parent #135# :org-element--cache-sync-key nil)) 0] #133# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38196 :end 38371 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (when (eq system-type 'darwin)\12    (use-package dash-at-point\12      :ensure t\12      :config (global-set-key (kbd \"C-c D\") 'dash-at-point)))\12" :post-blank 0 :post-affiliated 38196 :mode planning :granularity element :cached t :parent #136# :org-element--cache-sync-key nil)) 0] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38779 :end 38830 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (server-start)\12" :post-blank 1 :post-affiliated 38779 :mode planning :granularity element :cached t :parent #147=(section (:begin 38779 :end 38830 :contents-begin 38779 :contents-end 38829 :robust-begin 38779 :robust-end 38827 :post-blank 1 :post-affiliated 38779 :mode section :granularity element :cached t :parent #134# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #140=(section (:begin 38843 :end 38916 :contents-begin 38843 :contents-end 38915 :robust-begin 38843 :robust-end 38913 :post-blank 1 :post-affiliated 38843 :mode section :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] #137# 0] [[nil nil #138# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38925 :end 39984 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun eshell-here ()\12    \"Opens up a new shell in the directory associated with the\12    current buffer's file. The eshell is renamed to match that\12    directory to make multiple eshell windows easier.\"\12    (interactive)\12    (let* ((parent (if (buffer-file-name)\12                       (file-name-directory (buffer-file-name))\12                     default-directory))\12           (height (/ (window-total-height) 3))\12           (name   (car (last (split-string parent \"/\" t)))))\12      (split-window-vertically (- height))\12      (other-window 1)\12      (eshell \"new\")\12      (rename-buffer (concat \"*eshell: \" name \"*\"))\12      (insert (concat \"ls\"))\12      (eshell-send-input)\12      ))\12\12  (defun eshell/x (&rest _args)\12    \"exit quickly\"\12    (insert \"exit\")\12    (eshell-send-input)\12    (if (length> (window-list) 1)\12      (delete-window)))\12\12  (use-package vterm\12    :ensure t)\12  (use-package eshell-vterm\12    :ensure t\12    :demand t\12    :after eshell\12    :config (eshell-vterm-mode))\12\12  (defalias 'eshell/v 'eshell-exec-visual)\12" :post-blank 1 :post-affiliated 38925 :mode planning :granularity element :cached t :parent #139=(section (:begin 38925 :end 39984 :contents-begin 38925 :contents-end 39983 :robust-begin 38925 :robust-end 39981 :post-blank 1 :post-affiliated 38925 :mode section :granularity element :cached t :parent #138# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #139# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38843 :end 38916 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package proxy-mode\12  :ensure t)  \12" :post-blank 1 :post-affiliated 38843 :mode planning :granularity element :cached t :parent #140# :org-element--cache-sync-key nil)) 0] [[[nil nil #143=(section (:begin 39991 :end 40067 :contents-begin 39991 :contents-end 40066 :robust-begin 39991 :robust-end 40064 :post-blank 1 :post-affiliated 39991 :mode section :granularity element :cached t :parent #141# :org-element--cache-sync-key nil)) 0] [nil nil #142# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 39991 :end 40067 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package anki-editor\12    :ensure t)\12" :post-blank 1 :post-affiliated 39991 :mode planning :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 40084 :end 40193 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))  \12" :post-blank 1 :post-affiliated 40084 :mode planning :granularity element :cached t :parent #146=(section (:begin 40084 :end 40193 :contents-begin 40084 :contents-end 40192 :robust-begin 40084 :robust-end 40190 :post-blank 1 :post-affiliated 40084 :mode section :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 40211 :end 41352 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; set up my own map\12  (define-prefix-command 'z-map)\12  (global-set-key (kbd \"C-z\") 'z-map) ;; was C-1\12  (define-key z-map (kbd \"[\") 'org-mark-ring-goto)\12  (define-key z-map (kbd \"k\") 'compile)\12  (define-key z-map (kbd \"c\") 'hydra-multiple-cursors/body)\12  ;;(define-key z-map (kbd \"m\") 'mu4e)\12  ;;(define-key z-map (kbd \"1\") 'org-global-cycle)\12  ;;(define-key z-map (kbd \"a\") 'org-agenda-show-agenda-and-todo)\12  (define-key z-map (kbd \"g\") 'counsel-rg)\12\12  ;;(define-key z-map (kbd \"2\") 'make-frame-command)\12  ;;(define-key z-map (kbd \"0\") 'delete-frame)\12  (define-key z-map (kbd \"o\") 'ace-window)\12  (define-key z-map (kbd \"s\") 'deadgrep)  \12\11\11\11\11\11\11\11\11\11\11  ;(define-key z-map (kbd \"s\") 'flyspell-correct-word-before-point)\12  ;;(define-key z-map (kbd \"i\") 'z/load-iorg)\12  (define-key z-map (kbd \"f\") 'toggle-fold)\12  ;;(define-key z-map (kbd \"w\") 'z/swap-windows)\12  ;;(define-key z-map (kbd \"*\") 'calc)\12  (define-key z-map (kbd \"n\") 'narrow-or-widen-dwim)\12  (define-key z-map (kbd \"j\") 'org-clock-goto)\12  (define-key z-map (kbd \"e\") 'eshell-here)\12  (global-set-key (kbd \"C-<down-mouse-1>\") 'browse-url-at-mouse)\12" :post-blank 1 :post-affiliated 40211 :mode planning :granularity element :cached t :parent #145=(section (:begin 40211 :end 41352 :contents-begin 40211 :contents-end 41351 :robust-begin 40211 :robust-end 41349 :post-blank 1 :post-affiliated 40211 :mode section :granularity element :cached t :parent #144# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #145# 1] #144# 1] #146# 1] #141# 1] #147# 1] (paragraph (:begin 36917 :end 36935 :contents-begin 36917 :contents-end 36935 :post-blank 0 :post-affiliated 36917 :mode planning :granularity element :cached t :parent #127# :org-element--cache-sync-key nil)) 0] #148# 1] nil nil 0] org-element--cache-compare)))